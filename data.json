[{"tag":"Bouncy Castle - http://bouncycastle.org/","descr":"Bouncy Castle is a collection of APIs used in cryptography. It includes APIs for both the Java and the C# programming languages. The APIs are supported by a registered Australian charitable organization: Legion of the Bouncy Castle Inc.","License":{"plain":"- MIT\n","childs":{"0":[[{"content":"MIT","plain":"MIT\n","plainChilds":"","childs":[]}]]}},"Description":{"plain":"The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP.","childs":{"0":["The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP."]}},"Repository":{},"Archive":{"plain":"- https://github.com/bcgit/bc-csharp/archive/release-1.8.1.zip\n","childs":{"0":[[{"content":"https://github.com/bcgit/bc-csharp/archive/release-1.8.1.zip","plain":"https://github.com/bcgit/bc-csharp/archive/release-1.8.1.zip\n","plainChilds":"","childs":[]}]]}},"Metadata":{"plain":"- Release: 1.8.1\n","childs":{"0":[[{"content":"Release: 1.8.1","plain":"Release: 1.8.1\n","plainChilds":"","childs":[]}]]}},"Interface Languages":{"plain":"- C#\n","childs":{"0":[[{"content":"C#","plain":"C#\n","plainChilds":"","childs":[]}]]}},"CVE Vendor":{"plain":"bouncycastle","childs":{"0":["bouncycastle"]}},"CVE Product":{"plain":"legion-of-the-bouncy-castle-java-crytography-api","childs":{"0":["legion-of-the-bouncy-castle-java-crytography-api"]}},"Development Languages":{"plain":"- C#\n","childs":{"0":[[{"content":"C#","plain":"C#","plainChilds":"","childs":[]}]]}},"Block Ciphers":{"plain":"","childs":{"0":[[{"content":"3-Way","plain":"3-Way","plainChilds":"","childs":[]},{"content":"AES","plain":"AES","plainChilds":"","childs":[]},{"content":"AES-128","plain":"AES-128","plainChilds":"","childs":[]},{"content":"AES-192","plain":"AES-192","plainChilds":"","childs":[]},{"content":"AES-256","plain":"AES-256","plainChilds":"","childs":[]},{"content":"Blowfish","plain":"Blowfish","plainChilds":"","childs":[]},{"content":"Camellia","plain":"Camellia","plainChilds":"","childs":[]},{"content":"CAST","plain":"CAST","plainChilds":"","childs":[]},{"content":"DES","plain":"DES","plainChilds":"","childs":[]},{"content":"DEAL","plain":"DEAL","plainChilds":"","childs":[]},{"content":"DFC","plain":"DFC","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"IDEA NXT","plain":"IDEA NXT","plainChilds":"","childs":[]},{"content":"IDEA","plain":"IDEA","plainChilds":"","childs":[]},{"content":"M6","plain":"M6","plainChilds":"","childs":[]},{"content":"M8","plain":"M8","plainChilds":"","childs":[]},{"content":"MMB","plain":"MMB","plainChilds":"","childs":[]},{"content":"NDS","plain":"NDS","plainChilds":"","childs":[]},{"content":"NOEKEON","plain":"NOEKEON","plainChilds":"","childs":[]},{"content":"PRESENT","plain":"PRESENT","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"RC2","plain":"RC2","plainChilds":"","childs":[]},{"content":"RC5","plain":"RC5","plainChilds":"","childs":[]},{"content":"RC6","plain":"RC6","plainChilds":"","childs":[]},{"content":"Serpent","plain":"Serpent","plainChilds":"","childs":[]},{"content":"SEED","plain":"SEED","plainChilds":"","childs":[]},{"content":"SM4","plain":"SM4","plainChilds":"","childs":[]},{"content":"Threefish","plain":"Threefish","plainChilds":"","childs":[]},{"content":"TEA","plain":"TEA","plainChilds":"","childs":[]},{"content":"3DES","plain":"3DES","plainChilds":"","childs":[]},{"content":"Twofish","plain":"Twofish","plainChilds":"","childs":[]},{"content":"UES","plain":"UES","plainChilds":"","childs":[]}]]}},"Stream Ciphers":{"plain":"","childs":{"0":[[{"content":"ChaCha","plain":"ChaCha","plainChilds":"","childs":[]},{"content":"eSTREAM","plain":"eSTREAM","plainChilds":"","childs":[]},{"content":"ISAAC","plain":"ISAAC","plainChilds":"","childs":[]},{"content":"LEX","plain":"LEX","plainChilds":"","childs":[]},{"content":"MAG","plain":"MAG","plainChilds":"","childs":[]},{"content":"Py","plain":"Py","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"Salsa","plain":"Salsa","plainChilds":"","childs":[]},{"content":"ZUC","plain":"ZUC","plainChilds":"","childs":[]}]]}},"Hash Functions":{"plain":"","childs":{"0":[[{"content":"BLAKE2","plain":"BLAKE2","plainChilds":"","childs":[]},{"content":"FSB","plain":"FSB","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"MD2","plain":"MD2","plainChilds":"","childs":[]},{"content":"MD5","plain":"MD5","plainChilds":"","childs":[]},{"content":"MD6","plain":"MD6","plainChilds":"","childs":[]},{"content":"RIPEMD","plain":"RIPEMD","plainChilds":"","childs":[]},{"content":"scrypt","plain":"scrypt","plainChilds":"","childs":[]},{"content":"SHA","plain":"SHA","plainChilds":"","childs":[]},{"content":"SHA-1","plain":"SHA-1","plainChilds":"","childs":[]},{"content":"SHA-2","plain":"SHA-2","plainChilds":"","childs":[]},{"content":"SHA-3","plain":"SHA-3","plainChilds":"","childs":[]},{"content":"SHA-256","plain":"SHA-256","plainChilds":"","childs":[]},{"content":"SHA-512","plain":"SHA-512","plainChilds":"","childs":[]},{"content":"SipHash","plain":"SipHash","plainChilds":"","childs":[]},{"content":"Skein","plain":"Skein","plainChilds":"","childs":[]}]]}},"Encryption Modes":{"plain":"","childs":{"0":[[{"content":"ABC","plain":"ABC","plainChilds":"","childs":[]},{"content":"CBC","plain":"CBC","plainChilds":"","childs":[]},{"content":"CCM","plain":"CCM","plainChilds":"","childs":[]},{"content":"CFB","plain":"CFB","plainChilds":"","childs":[]},{"content":"CTR","plain":"CTR","plainChilds":"","childs":[]},{"content":"EAX","plain":"EAX","plainChilds":"","childs":[]},{"content":"ECB","plain":"ECB","plainChilds":"","childs":[]},{"content":"FFX","plain":"FFX","plainChilds":"","childs":[]},{"content":"GCM","plain":"GCM","plainChilds":"","childs":[]},{"content":"IGE","plain":"IGE","plainChilds":"","childs":[]},{"content":"IOC","plain":"IOC","plainChilds":"","childs":[]},{"content":"OCB","plain":"OCB","plainChilds":"","childs":[]},{"content":"OFB","plain":"OFB","plainChilds":"","childs":[]},{"content":"RAC","plain":"RAC","plainChilds":"","childs":[]},{"content":"RKC","plain":"RKC","plainChilds":"","childs":[]},{"content":"SIV","plain":"SIV","plainChilds":"","childs":[]}]]}},"Message Authentication Codes":{"plain":"","childs":{"0":[[{"content":"HMAC","plain":"HMAC","plainChilds":"","childs":[]},{"content":"OMAC","plain":"OMAC","plainChilds":"","childs":[]},{"content":"Poly1305","plain":"Poly1305","plainChilds":"","childs":[]}]]}},"Public Key Cryptography":{"plain":"","childs":{"0":[[{"content":"DH","plain":"DH","plainChilds":"","childs":[]},{"content":"DSA","plain":"DSA","plainChilds":"","childs":[]},{"content":"DSS","plain":"DSS","plainChilds":"","childs":[]},{"content":"ECDH","plain":"ECDH","plainChilds":"","childs":[]},{"content":"ECDSA","plain":"ECDSA","plainChilds":"","childs":[]},{"content":"LUC","plain":"LUC","plainChilds":"","childs":[]},{"content":"RSA","plain":"RSA","plainChilds":"","childs":[]},{"content":"YAK","plain":"YAK","plainChilds":"","childs":[]}]]}},"Public Key Infrastructure":{"plain":"","childs":{"0":[[{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"LDAP","plain":"LDAP","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PKCS","plain":"PKCS","plainChilds":"","childs":[]},{"content":"PKIX","plain":"PKIX","plainChilds":"","childs":[]},{"content":"SET","plain":"SET","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"Protocols":{"plain":"","childs":{"0":[[{"content":"AS1","plain":"AS1","plainChilds":"","childs":[]},{"content":"AKA","plain":"AKA","plainChilds":"","childs":[]},{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"CSR","plain":"CSR","plainChilds":"","childs":[]},{"content":"CMS","plain":"CMS","plainChilds":"","childs":[]},{"content":"DTLS","plain":"DTLS","plainChilds":"","childs":[]},{"content":"DPD","plain":"DPD","plainChilds":"","childs":[]},{"content":"DPV","plain":"DPV","plainChilds":"","childs":[]},{"content":"EST","plain":"EST","plainChilds":"","childs":[]},{"content":"GPG","plain":"GPG","plainChilds":"","childs":[]},{"content":"HTTPS","plain":"HTTPS","plainChilds":"","childs":[]},{"content":"I2P","plain":"I2P","plainChilds":"","childs":[]},{"content":"IES","plain":"IES","plainChilds":"","childs":[]},{"content":"IKE","plain":"IKE","plainChilds":"","childs":[]},{"content":"ISAKMP","plain":"ISAKMP","plainChilds":"","childs":[]},{"content":"IPsec","plain":"IPsec","plainChilds":"","childs":[]},{"content":"MSE","plain":"MSE","plainChilds":"","childs":[]},{"content":"OTR","plain":"OTR","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PE","plain":"PE","plainChilds":"","childs":[]},{"content":"PEM","plain":"PEM","plainChilds":"","childs":[]},{"content":"PHE","plain":"PHE","plainChilds":"","childs":[]},{"content":"PGP","plain":"PGP","plainChilds":"","childs":[]},{"content":"RTD","plain":"RTD","plainChilds":"","childs":[]},{"content":"SCVP","plain":"SCVP","plainChilds":"","childs":[]},{"content":"SEND","plain":"SEND","plainChilds":"","childs":[]},{"content":"SRTP","plain":"SRTP","plainChilds":"","childs":[]},{"content":"SSH","plain":"SSH","plainChilds":"","childs":[]},{"content":"SSL","plain":"SSL","plainChilds":"","childs":[]},{"content":"TSP","plain":"TSP","plainChilds":"","childs":[]},{"content":"TLS","plain":"TLS","plainChilds":"","childs":[]},{"content":"VBR","plain":"VBR","plainChilds":"","childs":[]},{"content":"WPA","plain":"WPA","plainChilds":"","childs":[]},{"content":"WPS","plain":"WPS","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"CVE Details":{"plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","childs":{"0":[[{"content":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)","plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","plainChilds":"","childs":[]}]]}}},{"tag":"Bouncy Castle - http://bouncycastle.org/","descr":"Bouncy Castle is a collection of APIs used in cryptography. It includes APIs for both the Java and the C# programming languages. The APIs are supported by a registered Australian charitable organization: Legion of the Bouncy Castle Inc.","License":{"plain":"- MIT\n","childs":{"0":[[{"content":"MIT","plain":"MIT\n","plainChilds":"","childs":[]}]]}},"Description":{"plain":"The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP.","childs":{"0":["The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP."]}},"Repository":{"plain":"","childs":{"0":[""]}},"Interface Languages":{"plain":"- C# FIPS\n","childs":{"0":[[{"content":"C# FIPS","plain":"C# FIPS\n","plainChilds":"","childs":[]}]]}},"CVE Vendor":{"plain":"bouncycastle","childs":{"0":["bouncycastle"]}},"CVE Product":{"plain":"legion-of-the-bouncy-castle-java-crytography-api","childs":{"0":["legion-of-the-bouncy-castle-java-crytography-api"]}},"Metadata":{"plain":"- Release: Unknown\n","childs":{"0":[[{"content":"Release: Unknown","plain":"Release: Unknown","plainChilds":"","childs":[]}]]}},"CVE Details":{"plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","childs":{"0":[[{"content":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)","plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","plainChilds":"","childs":[]}]]}}},{"tag":"Botan - https://botan.randombit.net/","descr":"Botan is a BSD-licensed cryptographic library written in C++. It provides a wide variety of cryptographic algorithms, formats, and protocols, e.g. SSL and TLS. It is used in the Monotone distributed revision control program, the OpenDNSSEC system, and ISC's Kea DHCP server among other projects.","License":{"plain":"- BSD-2-Clause\n","childs":{"0":[[{"content":"BSD-2-Clause","plain":"BSD-2-Clause\n","plainChilds":"","childs":[]}]]}},"Description":{"plain":"Botan's goal is to be the best option for cryptography in new C++ code by offering the tools necessary to implement a range of practical systems, such as TLS/DTLS, PKIX certificate handling, PKCS#11 and TPM hardware support, password hashing, and post quantum crypto schemes. In addition to the C++, botan has a C89 API specifically designed to be easy to call from other languages. A Python binding using ctypes is included, and several other language bindings are available.","childs":{"0":["Botan's goal is to be the best option for cryptography in new C++ code by offering the tools necessary to implement a range of practical systems, such as TLS/DTLS, PKIX certificate handling, PKCS#11 and TPM hardware support, password hashing, and post quantum crypto schemes. In addition to the C++, botan has a C89 API specifically designed to be easy to call from other languages. A Python binding using ctypes is included, and several other language bindings are available."]}},"Repository":{},"Interface Languages":{"plain":"- C++11\n","childs":{"0":[[{"content":"C++11","plain":"C++11\n","plainChilds":"","childs":[]}]]}},"CVE Vendor":{"plain":"botan_project","childs":{"0":["botan_project"]}},"CVE Product":{"plain":"botan","childs":{"0":["botan"]}},"Metadata":{"plain":"- Release: Latest\n- Stars: 784\n","childs":{"0":[[{"content":"Release: Latest","plain":"Release: Latest","plainChilds":"","childs":[]},{"content":"Stars: 784","plain":"Stars: 784","plainChilds":"","childs":[]}]]}},"Development Languages":{"plain":"- C++\n- Python\n","childs":{"0":[[{"content":"C++","plain":"C++","plainChilds":"","childs":[]},{"content":"Python","plain":"Python","plainChilds":"","childs":[]}]]}},"Block Ciphers":{"plain":"","childs":{"0":[[{"content":"AES","plain":"AES","plainChilds":"","childs":[]},{"content":"AES-128","plain":"AES-128","plainChilds":"","childs":[]},{"content":"AES-192","plain":"AES-192","plainChilds":"","childs":[]},{"content":"AES-256","plain":"AES-256","plainChilds":"","childs":[]},{"content":"ARIA","plain":"ARIA","plainChilds":"","childs":[]},{"content":"Blowfish","plain":"Blowfish","plainChilds":"","childs":[]},{"content":"Camellia","plain":"Camellia","plainChilds":"","childs":[]},{"content":"CAST","plain":"CAST","plainChilds":"","childs":[]},{"content":"CAST-128","plain":"CAST-128","plainChilds":"","childs":[]},{"content":"CAST-256","plain":"CAST-256","plainChilds":"","childs":[]},{"content":"DES","plain":"DES","plainChilds":"","childs":[]},{"content":"DEAL","plain":"DEAL","plainChilds":"","childs":[]},{"content":"FPE","plain":"FPE","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"IDEA NXT","plain":"IDEA NXT","plainChilds":"","childs":[]},{"content":"IDEA","plain":"IDEA","plainChilds":"","childs":[]},{"content":"KASUMI","plain":"KASUMI","plainChilds":"","childs":[]},{"content":"M6","plain":"M6","plainChilds":"","childs":[]},{"content":"M8","plain":"M8","plainChilds":"","childs":[]},{"content":"Mercy","plain":"Mercy","plainChilds":"","childs":[]},{"content":"MISTY1","plain":"MISTY1","plainChilds":"","childs":[]},{"content":"MMB","plain":"MMB","plainChilds":"","childs":[]},{"content":"NDS","plain":"NDS","plainChilds":"","childs":[]},{"content":"NOEKEON","plain":"NOEKEON","plainChilds":"","childs":[]},{"content":"PRESENT","plain":"PRESENT","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"RC2","plain":"RC2","plainChilds":"","childs":[]},{"content":"RC5","plain":"RC5","plainChilds":"","childs":[]},{"content":"SAFER","plain":"SAFER","plainChilds":"","childs":[]},{"content":"Serpent","plain":"Serpent","plainChilds":"","childs":[]},{"content":"SEED","plain":"SEED","plainChilds":"","childs":[]},{"content":"SHACAL","plain":"SHACAL","plainChilds":"","childs":[]},{"content":"Simon","plain":"Simon","plainChilds":"","childs":[]},{"content":"SM4","plain":"SM4","plainChilds":"","childs":[]},{"content":"Threefish","plain":"Threefish","plainChilds":"","childs":[]},{"content":"TEA","plain":"TEA","plainChilds":"","childs":[]},{"content":"Twofish","plain":"Twofish","plainChilds":"","childs":[]},{"content":"XTEA","plain":"XTEA","plainChilds":"","childs":[]}]]}},"Stream Ciphers":{"plain":"","childs":{"0":[[{"content":"ChaCha","plain":"ChaCha","plainChilds":"","childs":[]},{"content":"Dragon","plain":"Dragon","plainChilds":"","childs":[]},{"content":"eSTREAM","plain":"eSTREAM","plainChilds":"","childs":[]},{"content":"LEX","plain":"LEX","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"Salsa","plain":"Salsa","plainChilds":"","childs":[]},{"content":"Turing","plain":"Turing","plainChilds":"","childs":[]}]]}},"Hash Functions":{"plain":"","childs":{"0":[[{"content":"BLAKE2","plain":"BLAKE2","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"MD2","plain":"MD2","plainChilds":"","childs":[]},{"content":"MD5","plain":"MD5","plainChilds":"","childs":[]},{"content":"MD6","plain":"MD6","plainChilds":"","childs":[]},{"content":"PBKDF2","plain":"PBKDF2","plainChilds":"","childs":[]},{"content":"RIPEMD","plain":"RIPEMD","plainChilds":"","childs":[]},{"content":"scrypt","plain":"scrypt","plainChilds":"","childs":[]},{"content":"SHA","plain":"SHA","plainChilds":"","childs":[]},{"content":"SHA-1","plain":"SHA-1","plainChilds":"","childs":[]},{"content":"SHA-2","plain":"SHA-2","plainChilds":"","childs":[]},{"content":"SHA-3","plain":"SHA-3","plainChilds":"","childs":[]},{"content":"SHA-256","plain":"SHA-256","plainChilds":"","childs":[]},{"content":"SHA-512","plain":"SHA-512","plainChilds":"","childs":[]},{"content":"SipHash","plain":"SipHash","plainChilds":"","childs":[]},{"content":"Skein","plain":"Skein","plainChilds":"","childs":[]},{"content":"Streebog","plain":"Streebog","plainChilds":"","childs":[]},{"content":"Tiger","plain":"Tiger","plainChilds":"","childs":[]},{"content":"WHIRLPOOL","plain":"WHIRLPOOL","plainChilds":"","childs":[]}]]}},"Encryption Modes":{"plain":"","childs":{"0":[[{"content":"ABC","plain":"ABC","plainChilds":"","childs":[]},{"content":"BPS","plain":"BPS","plainChilds":"","childs":[]},{"content":"CBC","plain":"CBC","plainChilds":"","childs":[]},{"content":"CCM","plain":"CCM","plainChilds":"","childs":[]},{"content":"CFB","plain":"CFB","plainChilds":"","childs":[]},{"content":"CTR","plain":"CTR","plainChilds":"","childs":[]},{"content":"EAX","plain":"EAX","plainChilds":"","childs":[]},{"content":"ECB","plain":"ECB","plainChilds":"","childs":[]},{"content":"FFX","plain":"FFX","plainChilds":"","childs":[]},{"content":"GCM","plain":"GCM","plainChilds":"","childs":[]},{"content":"IOC","plain":"IOC","plainChilds":"","childs":[]},{"content":"OCB","plain":"OCB","plainChilds":"","childs":[]},{"content":"OFB","plain":"OFB","plainChilds":"","childs":[]},{"content":"RAC","plain":"RAC","plainChilds":"","childs":[]},{"content":"SIV","plain":"SIV","plainChilds":"","childs":[]}]]}},"Message Authentication Codes":{"plain":"","childs":{"0":[[{"content":"HMAC","plain":"HMAC","plainChilds":"","childs":[]},{"content":"Poly1305","plain":"Poly1305","plainChilds":"","childs":[]}]]}},"Public Key Cryptography":{"plain":"","childs":{"0":[[{"content":"DH","plain":"DH","plainChilds":"","childs":[]},{"content":"DSA","plain":"DSA","plainChilds":"","childs":[]},{"content":"DSS","plain":"DSS","plainChilds":"","childs":[]},{"content":"ECDH","plain":"ECDH","plainChilds":"","childs":[]},{"content":"ECDSA","plain":"ECDSA","plainChilds":"","childs":[]},{"content":"ElGamal","plain":"ElGamal","plainChilds":"","childs":[]},{"content":"McEliece","plain":"McEliece","plainChilds":"","childs":[]},{"content":"RSA","plain":"RSA","plainChilds":"","childs":[]}]]}},"Public Key Infrastructure":{"plain":"","childs":{"0":[[{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"Identrus","plain":"Identrus","plainChilds":"","childs":[]},{"content":"LDAP","plain":"LDAP","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PKCS","plain":"PKCS","plainChilds":"","childs":[]},{"content":"PKIX","plain":"PKIX","plainChilds":"","childs":[]},{"content":"SET","plain":"SET","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"Protocols":{"plain":"","childs":{"0":[[{"content":"AS2","plain":"AS2","plainChilds":"","childs":[]},{"content":"AKA","plain":"AKA","plainChilds":"","childs":[]},{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"CSR","plain":"CSR","plainChilds":"","childs":[]},{"content":"CMS","plain":"CMS","plainChilds":"","childs":[]},{"content":"DTLS","plain":"DTLS","plainChilds":"","childs":[]},{"content":"DPD","plain":"DPD","plainChilds":"","childs":[]},{"content":"DPV","plain":"DPV","plainChilds":"","childs":[]},{"content":"DCII","plain":"DCII","plainChilds":"","childs":[]},{"content":"EST","plain":"EST","plainChilds":"","childs":[]},{"content":"GPG","plain":"GPG","plainChilds":"","childs":[]},{"content":"HTTPS","plain":"HTTPS","plainChilds":"","childs":[]},{"content":"IKE","plain":"IKE","plainChilds":"","childs":[]},{"content":"MSE","plain":"MSE","plainChilds":"","childs":[]},{"content":"OTR","plain":"OTR","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PCT","plain":"PCT","plainChilds":"","childs":[]},{"content":"PE","plain":"PE","plainChilds":"","childs":[]},{"content":"PEM","plain":"PEM","plainChilds":"","childs":[]},{"content":"PHE","plain":"PHE","plainChilds":"","childs":[]},{"content":"PGP","plain":"PGP","plainChilds":"","childs":[]},{"content":"RTD","plain":"RTD","plainChilds":"","childs":[]},{"content":"SEND","plain":"SEND","plainChilds":"","childs":[]},{"content":"SRTP","plain":"SRTP","plainChilds":"","childs":[]},{"content":"SSL","plain":"SSL","plainChilds":"","childs":[]},{"content":"TLS","plain":"TLS","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"CVE Details":{"plain":"- A cryptographic cache-based side channel in the RSA implementation in Botan before 1.10.17, and 1.11.x and 2.x before 2.3.0, allows a local attacker to recover information about RSA secret keys, as demonstrated by CacheD. This occurs because an array is indexed with bits derived from a secret key. (<https://cve.circl.lu/cve/CVE-2017-14737>)\n - A programming error exists in a way Randombit Botan cryptographic library version 2.0.1 implements x500 string comparisons which could lead to certificate verification issues and abuse. A specially crafted X509 certificate would need to be delivered to the client or server application in order to trigger this vulnerability. (<https://cve.circl.lu/cve/CVE-2017-2801>)\n - The X509_Certificate::allowed_usage function in botan 1.11.x before 1.11.31 might allow attackers to have unspecified impact by leveraging a call with more than one Key_Usage set in the enum value. (<https://cve.circl.lu/cve/CVE-2016-6879>)\n - The Curve25519 code in botan before 1.11.31, on systems without a native 128-bit integer type, might allow attackers to have unspecified impact via vectors related to undefined behavior, as demonstrated on 32-bit ARM systems compiled by Clang. (<https://cve.circl.lu/cve/CVE-2016-6878>)\n - botan 1.11.x before 1.11.22 makes it easier for remote attackers to decrypt TLS ciphertext data via a padding-oracle attack against TLS CBC ciphersuites. (<https://cve.circl.lu/cve/CVE-2015-7824>)\n - botan before 1.11.22 improperly validates certificate paths, which allows remote attackers to cause a denial of service (infinite loop and memory consumption) via a certificate with a loop in the certificate chain. (<https://cve.circl.lu/cve/CVE-2015-7825>)\n - botan 1.11.x before 1.11.22 improperly handles wildcard matching against hostnames, which might allow remote attackers to have unspecified impact via a valid X.509 certificate, as demonstrated by accepting *.example.com as a match for bar.foo.example.com. (<https://cve.circl.lu/cve/CVE-2015-7826>)\n - In Botan 1.8.0 through 1.11.33, when decoding BER data an integer overflow could occur, which would cause an incorrect length field to be computed. Some API callers may use the returned (incorrect and attacker controlled) length field in a way which later causes memory corruption or other failure. (<https://cve.circl.lu/cve/CVE-2016-9132>)\n - In Botan 1.11.29 through 1.11.32, RSA decryption with certain padding options had a detectable timing channel which could given sufficient queries be used to recover plaintext, aka an OAEP side channel attack. (<https://cve.circl.lu/cve/CVE-2016-8871>)\n - Botan before 1.10.13 and 1.11.x before 1.11.22 make it easier for remote attackers to conduct million-message attacks by measuring time differences, related to decoding of PKCS#1 padding. (<https://cve.circl.lu/cve/CVE-2015-7827>)\n - Botan before 1.10.13 and 1.11.x before 1.11.29 do not use a constant-time algorithm to perform a modular inverse on the signature nonce k, which might allow remote attackers to obtain ECDSA secret keys via a timing side-channel attack. (<https://cve.circl.lu/cve/CVE-2016-2849>)\n - Botan 1.11.x before 1.11.29 does not enforce TLS policy for (1) signature algorithms and (2) ECC curves, which allows remote attackers to conduct downgrade attacks via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2850>)\n - The ressol function in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (infinite loop) via unspecified input to the OS2ECP function, related to a composite modulus. (<https://cve.circl.lu/cve/CVE-2016-2194>)\n - Integer overflow in the PointGFp constructor in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to overwrite memory and possibly execute arbitrary code via a crafted ECC point, which triggers a heap-based buffer overflow. (<https://cve.circl.lu/cve/CVE-2016-2195>)\n - Heap-based buffer overflow in the P-521 reduction function in Botan 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (memory overwrite and crash) or execute arbitrary code via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2196>)\n - The BER decoder in Botan 0.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (application crash) via an empty BIT STRING in ASN.1 data. (<https://cve.circl.lu/cve/CVE-2015-5726>)\n - The Miller-Rabin primality check in Botan before 1.10.8 and 1.11.x before 1.11.9 improperly uses a single random base, which makes it easier for remote attackers to defeat cryptographic protection mechanisms via a DH group. (<https://cve.circl.lu/cve/CVE-2014-9742>)\n - The BER decoder in Botan 1.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (memory consumption) via unspecified vectors, related to a length field. (<https://cve.circl.lu/cve/CVE-2015-5727>)\u0000","childs":{"0":[[{"content":"- A cryptographic cache-based side channel in the RSA implementation in Botan before 1.10.17, and 1.11.x and 2.x before 2.3.0, allows a local attacker to recover information about RSA secret keys, as demonstrated by CacheD. This occurs because an array is indexed with bits derived from a secret key. (<https://cve.circl.lu/cve/CVE-2017-14737>)\n - A programming error exists in a way Randombit Botan cryptographic library version 2.0.1 implements x500 string comparisons which could lead to certificate verification issues and abuse. A specially crafted X509 certificate would need to be delivered to the client or server application in order to trigger this vulnerability. (<https://cve.circl.lu/cve/CVE-2017-2801>)\n - The X509_Certificate::allowed_usage function in botan 1.11.x before 1.11.31 might allow attackers to have unspecified impact by leveraging a call with more than one Key_Usage set in the enum value. (<https://cve.circl.lu/cve/CVE-2016-6879>)\n - The Curve25519 code in botan before 1.11.31, on systems without a native 128-bit integer type, might allow attackers to have unspecified impact via vectors related to undefined behavior, as demonstrated on 32-bit ARM systems compiled by Clang. (<https://cve.circl.lu/cve/CVE-2016-6878>)\n - botan 1.11.x before 1.11.22 makes it easier for remote attackers to decrypt TLS ciphertext data via a padding-oracle attack against TLS CBC ciphersuites. (<https://cve.circl.lu/cve/CVE-2015-7824>)\n - botan before 1.11.22 improperly validates certificate paths, which allows remote attackers to cause a denial of service (infinite loop and memory consumption) via a certificate with a loop in the certificate chain. (<https://cve.circl.lu/cve/CVE-2015-7825>)\n - botan 1.11.x before 1.11.22 improperly handles wildcard matching against hostnames, which might allow remote attackers to have unspecified impact via a valid X.509 certificate, as demonstrated by accepting *.example.com as a match for bar.foo.example.com. (<https://cve.circl.lu/cve/CVE-2015-7826>)\n - In Botan 1.8.0 through 1.11.33, when decoding BER data an integer overflow could occur, which would cause an incorrect length field to be computed. Some API callers may use the returned (incorrect and attacker controlled) length field in a way which later causes memory corruption or other failure. (<https://cve.circl.lu/cve/CVE-2016-9132>)\n - In Botan 1.11.29 through 1.11.32, RSA decryption with certain padding options had a detectable timing channel which could given sufficient queries be used to recover plaintext, aka an OAEP side channel attack. (<https://cve.circl.lu/cve/CVE-2016-8871>)\n - Botan before 1.10.13 and 1.11.x before 1.11.22 make it easier for remote attackers to conduct million-message attacks by measuring time differences, related to decoding of PKCS#1 padding. (<https://cve.circl.lu/cve/CVE-2015-7827>)\n - Botan before 1.10.13 and 1.11.x before 1.11.29 do not use a constant-time algorithm to perform a modular inverse on the signature nonce k, which might allow remote attackers to obtain ECDSA secret keys via a timing side-channel attack. (<https://cve.circl.lu/cve/CVE-2016-2849>)\n - Botan 1.11.x before 1.11.29 does not enforce TLS policy for (1) signature algorithms and (2) ECC curves, which allows remote attackers to conduct downgrade attacks via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2850>)\n - The ressol function in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (infinite loop) via unspecified input to the OS2ECP function, related to a composite modulus. (<https://cve.circl.lu/cve/CVE-2016-2194>)\n - Integer overflow in the PointGFp constructor in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to overwrite memory and possibly execute arbitrary code via a crafted ECC point, which triggers a heap-based buffer overflow. (<https://cve.circl.lu/cve/CVE-2016-2195>)\n - Heap-based buffer overflow in the P-521 reduction function in Botan 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (memory overwrite and crash) or execute arbitrary code via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2196>)\n - The BER decoder in Botan 0.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (application crash) via an empty BIT STRING in ASN.1 data. (<https://cve.circl.lu/cve/CVE-2015-5726>)\n - The Miller-Rabin primality check in Botan before 1.10.8 and 1.11.x before 1.11.9 improperly uses a single random base, which makes it easier for remote attackers to defeat cryptographic protection mechanisms via a DH group. (<https://cve.circl.lu/cve/CVE-2014-9742>)\n - The BER decoder in Botan 1.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (memory consumption) via unspecified vectors, related to a length field. (<https://cve.circl.lu/cve/CVE-2015-5727>)","plain":"- A cryptographic cache-based side channel in the RSA implementation in Botan before 1.10.17, and 1.11.x and 2.x before 2.3.0, allows a local attacker to recover information about RSA secret keys, as demonstrated by CacheD. This occurs because an array is indexed with bits derived from a secret key. (<https://cve.circl.lu/cve/CVE-2017-14737>)\n - A programming error exists in a way Randombit Botan cryptographic library version 2.0.1 implements x500 string comparisons which could lead to certificate verification issues and abuse. A specially crafted X509 certificate would need to be delivered to the client or server application in order to trigger this vulnerability. (<https://cve.circl.lu/cve/CVE-2017-2801>)\n - The X509_Certificate::allowed_usage function in botan 1.11.x before 1.11.31 might allow attackers to have unspecified impact by leveraging a call with more than one Key_Usage set in the enum value. (<https://cve.circl.lu/cve/CVE-2016-6879>)\n - The Curve25519 code in botan before 1.11.31, on systems without a native 128-bit integer type, might allow attackers to have unspecified impact via vectors related to undefined behavior, as demonstrated on 32-bit ARM systems compiled by Clang. (<https://cve.circl.lu/cve/CVE-2016-6878>)\n - botan 1.11.x before 1.11.22 makes it easier for remote attackers to decrypt TLS ciphertext data via a padding-oracle attack against TLS CBC ciphersuites. (<https://cve.circl.lu/cve/CVE-2015-7824>)\n - botan before 1.11.22 improperly validates certificate paths, which allows remote attackers to cause a denial of service (infinite loop and memory consumption) via a certificate with a loop in the certificate chain. (<https://cve.circl.lu/cve/CVE-2015-7825>)\n - botan 1.11.x before 1.11.22 improperly handles wildcard matching against hostnames, which might allow remote attackers to have unspecified impact via a valid X.509 certificate, as demonstrated by accepting *.example.com as a match for bar.foo.example.com. (<https://cve.circl.lu/cve/CVE-2015-7826>)\n - In Botan 1.8.0 through 1.11.33, when decoding BER data an integer overflow could occur, which would cause an incorrect length field to be computed. Some API callers may use the returned (incorrect and attacker controlled) length field in a way which later causes memory corruption or other failure. (<https://cve.circl.lu/cve/CVE-2016-9132>)\n - In Botan 1.11.29 through 1.11.32, RSA decryption with certain padding options had a detectable timing channel which could given sufficient queries be used to recover plaintext, aka an OAEP side channel attack. (<https://cve.circl.lu/cve/CVE-2016-8871>)\n - Botan before 1.10.13 and 1.11.x before 1.11.22 make it easier for remote attackers to conduct million-message attacks by measuring time differences, related to decoding of PKCS#1 padding. (<https://cve.circl.lu/cve/CVE-2015-7827>)\n - Botan before 1.10.13 and 1.11.x before 1.11.29 do not use a constant-time algorithm to perform a modular inverse on the signature nonce k, which might allow remote attackers to obtain ECDSA secret keys via a timing side-channel attack. (<https://cve.circl.lu/cve/CVE-2016-2849>)\n - Botan 1.11.x before 1.11.29 does not enforce TLS policy for (1) signature algorithms and (2) ECC curves, which allows remote attackers to conduct downgrade attacks via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2850>)\n - The ressol function in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (infinite loop) via unspecified input to the OS2ECP function, related to a composite modulus. (<https://cve.circl.lu/cve/CVE-2016-2194>)\n - Integer overflow in the PointGFp constructor in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to overwrite memory and possibly execute arbitrary code via a crafted ECC point, which triggers a heap-based buffer overflow. (<https://cve.circl.lu/cve/CVE-2016-2195>)\n - Heap-based buffer overflow in the P-521 reduction function in Botan 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (memory overwrite and crash) or execute arbitrary code via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2196>)\n - The BER decoder in Botan 0.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (application crash) via an empty BIT STRING in ASN.1 data. (<https://cve.circl.lu/cve/CVE-2015-5726>)\n - The Miller-Rabin primality check in Botan before 1.10.8 and 1.11.x before 1.11.9 improperly uses a single random base, which makes it easier for remote attackers to defeat cryptographic protection mechanisms via a DH group. (<https://cve.circl.lu/cve/CVE-2014-9742>)\n - The BER decoder in Botan 1.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (memory consumption) via unspecified vectors, related to a length field. (<https://cve.circl.lu/cve/CVE-2015-5727>)\u0000","plainChilds":"","childs":[]}]]}}},{"tag":"Bouncy Castle - http://bouncycastle.org/","descr":"Bouncy Castle is a collection of APIs used in cryptography. It includes APIs for both the Java and the C# programming languages. The APIs are supported by a registered Australian charitable organization: Legion of the Bouncy Castle Inc.","License":{"plain":"- MIT\n","childs":{"0":[[{"content":"MIT","plain":"MIT\n","plainChilds":"","childs":[]}]]}},"Description":{"plain":"The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP.","childs":{"0":["The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP."]}},"Repository":{},"Archive":{"plain":"- https://github.com/bcgit/bc-java/archive/r1rv59.zip\n","childs":{"0":[[{"content":"https://github.com/bcgit/bc-java/archive/r1rv59.zip","plain":"https://github.com/bcgit/bc-java/archive/r1rv59.zip\n","plainChilds":"","childs":[]}]]}},"Interface Languages":{"plain":"- Java\n","childs":{"0":[[{"content":"Java","plain":"Java\n","plainChilds":"","childs":[]}]]}},"Metadata":{"plain":"- Release: 1.59\n- Release Date: 2017-12-18\n","childs":{"0":[[{"content":"Release: 1.59","plain":"Release: 1.59\n","plainChilds":"","childs":[]},{"content":"Release Date: 2017-12-18","plain":"Release Date: 2017-12-18\n","plainChilds":"","childs":[]}]]}},"CVE Vendor":{"plain":"bouncycastle","childs":{"0":["bouncycastle"]}},"CVE Product":{"plain":"legion-of-the-bouncy-castle-java-crytography-api","childs":{"0":["legion-of-the-bouncy-castle-java-crytography-api"]}},"Development Languages":{"plain":"- Java\n","childs":{"0":[[{"content":"Java","plain":"Java","plainChilds":"","childs":[]}]]}},"Block Ciphers":{"plain":"","childs":{"0":[[{"content":"3-Way","plain":"3-Way","plainChilds":"","childs":[]},{"content":"AES","plain":"AES","plainChilds":"","childs":[]},{"content":"AES-128","plain":"AES-128","plainChilds":"","childs":[]},{"content":"AES-192","plain":"AES-192","plainChilds":"","childs":[]},{"content":"AES-256","plain":"AES-256","plainChilds":"","childs":[]},{"content":"ARIA","plain":"ARIA","plainChilds":"","childs":[]},{"content":"ARIA-128","plain":"ARIA-128","plainChilds":"","childs":[]},{"content":"ARIA-192","plain":"ARIA-192","plainChilds":"","childs":[]},{"content":"ARIA-256","plain":"ARIA-256","plainChilds":"","childs":[]},{"content":"Blowfish","plain":"Blowfish","plainChilds":"","childs":[]},{"content":"Camellia","plain":"Camellia","plainChilds":"","childs":[]},{"content":"CAST","plain":"CAST","plainChilds":"","childs":[]},{"content":"DES","plain":"DES","plainChilds":"","childs":[]},{"content":"DEAL","plain":"DEAL","plainChilds":"","childs":[]},{"content":"DFC","plain":"DFC","plainChilds":"","childs":[]},{"content":"FPE","plain":"FPE","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"IDEA NXT","plain":"IDEA NXT","plainChilds":"","childs":[]},{"content":"IDEA","plain":"IDEA","plainChilds":"","childs":[]},{"content":"M6","plain":"M6","plainChilds":"","childs":[]},{"content":"M8","plain":"M8","plainChilds":"","childs":[]},{"content":"MMB","plain":"MMB","plainChilds":"","childs":[]},{"content":"NDS","plain":"NDS","plainChilds":"","childs":[]},{"content":"NOEKEON","plain":"NOEKEON","plainChilds":"","childs":[]},{"content":"PRESENT","plain":"PRESENT","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"RC2","plain":"RC2","plainChilds":"","childs":[]},{"content":"RC5","plain":"RC5","plainChilds":"","childs":[]},{"content":"RC6","plain":"RC6","plainChilds":"","childs":[]},{"content":"SAFER","plain":"SAFER","plainChilds":"","childs":[]},{"content":"Serpent","plain":"Serpent","plainChilds":"","childs":[]},{"content":"SEED","plain":"SEED","plainChilds":"","childs":[]},{"content":"SM4","plain":"SM4","plainChilds":"","childs":[]},{"content":"Threefish","plain":"Threefish","plainChilds":"","childs":[]},{"content":"TEA","plain":"TEA","plainChilds":"","childs":[]},{"content":"3DES","plain":"3DES","plainChilds":"","childs":[]},{"content":"Twofish","plain":"Twofish","plainChilds":"","childs":[]},{"content":"UES","plain":"UES","plainChilds":"","childs":[]}]]}},"Stream Ciphers":{"plain":"","childs":{"0":[[{"content":"ChaCha","plain":"ChaCha","plainChilds":"","childs":[]},{"content":"Crypto1","plain":"Crypto1","plainChilds":"","childs":[]},{"content":"eSTREAM","plain":"eSTREAM","plainChilds":"","childs":[]},{"content":"FISH","plain":"FISH","plainChilds":"","childs":[]},{"content":"ISAAC","plain":"ISAAC","plainChilds":"","childs":[]},{"content":"LEX","plain":"LEX","plainChilds":"","childs":[]},{"content":"MAG","plain":"MAG","plainChilds":"","childs":[]},{"content":"NLS","plain":"NLS","plainChilds":"","childs":[]},{"content":"Py","plain":"Py","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"Salsa","plain":"Salsa","plainChilds":"","childs":[]},{"content":"SEAL","plain":"SEAL","plainChilds":"","childs":[]},{"content":"Turing","plain":"Turing","plainChilds":"","childs":[]},{"content":"ZUC","plain":"ZUC","plainChilds":"","childs":[]}]]}},"Hash Functions":{"plain":"","childs":{"0":[[{"content":"BLAKE2","plain":"BLAKE2","plainChilds":"","childs":[]},{"content":"FSB","plain":"FSB","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"MD2","plain":"MD2","plainChilds":"","childs":[]},{"content":"MD5","plain":"MD5","plainChilds":"","childs":[]},{"content":"MD6","plain":"MD6","plainChilds":"","childs":[]},{"content":"PBKDF2","plain":"PBKDF2","plainChilds":"","childs":[]},{"content":"RIPEMD","plain":"RIPEMD","plainChilds":"","childs":[]},{"content":"scrypt","plain":"scrypt","plainChilds":"","childs":[]},{"content":"SHA","plain":"SHA","plainChilds":"","childs":[]},{"content":"SHA-1","plain":"SHA-1","plainChilds":"","childs":[]},{"content":"SHA-2","plain":"SHA-2","plainChilds":"","childs":[]},{"content":"SHA-3","plain":"SHA-3","plainChilds":"","childs":[]},{"content":"SHA-256","plain":"SHA-256","plainChilds":"","childs":[]},{"content":"SHA-512","plain":"SHA-512","plainChilds":"","childs":[]},{"content":"SHAKE","plain":"SHAKE","plainChilds":"","childs":[]},{"content":"SipHash","plain":"SipHash","plainChilds":"","childs":[]},{"content":"Skein","plain":"Skein","plainChilds":"","childs":[]},{"content":"Streebog","plain":"Streebog","plainChilds":"","childs":[]},{"content":"WHIRLPOOL","plain":"WHIRLPOOL","plainChilds":"","childs":[]}]]}},"Encryption Modes":{"plain":"","childs":{"0":[[{"content":"ABC","plain":"ABC","plainChilds":"","childs":[]},{"content":"BPS","plain":"BPS","plainChilds":"","childs":[]},{"content":"CBC","plain":"CBC","plainChilds":"","childs":[]},{"content":"CCM","plain":"CCM","plainChilds":"","childs":[]},{"content":"CFB","plain":"CFB","plainChilds":"","childs":[]},{"content":"CTR","plain":"CTR","plainChilds":"","childs":[]},{"content":"EAX","plain":"EAX","plainChilds":"","childs":[]},{"content":"ECB","plain":"ECB","plainChilds":"","childs":[]},{"content":"FFX","plain":"FFX","plainChilds":"","childs":[]},{"content":"GCM","plain":"GCM","plainChilds":"","childs":[]},{"content":"IGE","plain":"IGE","plainChilds":"","childs":[]},{"content":"IOC","plain":"IOC","plainChilds":"","childs":[]},{"content":"KFB","plain":"KFB","plainChilds":"","childs":[]},{"content":"OCB","plain":"OCB","plainChilds":"","childs":[]},{"content":"OFB","plain":"OFB","plainChilds":"","childs":[]},{"content":"RAC","plain":"RAC","plainChilds":"","childs":[]},{"content":"RKC","plain":"RKC","plainChilds":"","childs":[]},{"content":"SIV","plain":"SIV","plainChilds":"","childs":[]},{"content":"XBC","plain":"XBC","plainChilds":"","childs":[]}]]}},"Message Authentication Codes":{"plain":"","childs":{"0":[[{"content":"HMAC","plain":"HMAC","plainChilds":"","childs":[]},{"content":"OMAC","plain":"OMAC","plainChilds":"","childs":[]},{"content":"Poly1305","plain":"Poly1305","plainChilds":"","childs":[]}]]}},"Public Key Cryptography":{"plain":"","childs":{"0":[[{"content":"DH","plain":"DH","plainChilds":"","childs":[]},{"content":"DSA","plain":"DSA","plainChilds":"","childs":[]},{"content":"DSS","plain":"DSS","plainChilds":"","childs":[]},{"content":"ECDH","plain":"ECDH","plainChilds":"","childs":[]},{"content":"ECDSA","plain":"ECDSA","plainChilds":"","childs":[]},{"content":"ElGamal","plain":"ElGamal","plainChilds":"","childs":[]},{"content":"LUC","plain":"LUC","plainChilds":"","childs":[]},{"content":"McEliece","plain":"McEliece","plainChilds":"","childs":[]},{"content":"RSA","plain":"RSA","plainChilds":"","childs":[]},{"content":"YAK","plain":"YAK","plainChilds":"","childs":[]}]]}},"Public Key Infrastructure":{"plain":"","childs":{"0":[[{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"DVCS","plain":"DVCS","plainChilds":"","childs":[]},{"content":"LDAP","plain":"LDAP","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PKCS","plain":"PKCS","plainChilds":"","childs":[]},{"content":"PKIX","plain":"PKIX","plainChilds":"","childs":[]},{"content":"PKCS#7","plain":"PKCS#7","plainChilds":"","childs":[]},{"content":"SET","plain":"SET","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]},{"content":"XiPKI","plain":"XiPKI","plainChilds":"","childs":[]}]]}},"Protocols":{"plain":"","childs":{"0":[[{"content":"AS1","plain":"AS1","plainChilds":"","childs":[]},{"content":"AS2","plain":"AS2","plainChilds":"","childs":[]},{"content":"AKA","plain":"AKA","plainChilds":"","childs":[]},{"content":"CMC","plain":"CMC","plainChilds":"","childs":[]},{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"CSR","plain":"CSR","plainChilds":"","childs":[]},{"content":"CMS","plain":"CMS","plainChilds":"","childs":[]},{"content":"CGA","plain":"CGA","plainChilds":"","childs":[]},{"content":"DTLS","plain":"DTLS","plainChilds":"","childs":[]},{"content":"DPD","plain":"DPD","plainChilds":"","childs":[]},{"content":"DPV","plain":"DPV","plainChilds":"","childs":[]},{"content":"DCII","plain":"DCII","plainChilds":"","childs":[]},{"content":"DK","plain":"DK","plainChilds":"","childs":[]},{"content":"EKE","plain":"EKE","plainChilds":"","childs":[]},{"content":"EST","plain":"EST","plainChilds":"","childs":[]},{"content":"GSI","plain":"GSI","plainChilds":"","childs":[]},{"content":"GPG","plain":"GPG","plainChilds":"","childs":[]},{"content":"HTTPS","plain":"HTTPS","plainChilds":"","childs":[]},{"content":"I2P","plain":"I2P","plainChilds":"","childs":[]},{"content":"IES","plain":"IES","plainChilds":"","childs":[]},{"content":"IKE","plain":"IKE","plainChilds":"","childs":[]},{"content":"ISAKMP","plain":"ISAKMP","plainChilds":"","childs":[]},{"content":"IPsec","plain":"IPsec","plainChilds":"","childs":[]},{"content":"KMIP","plain":"KMIP","plainChilds":"","childs":[]},{"content":"MSE","plain":"MSE","plainChilds":"","childs":[]},{"content":"OTR","plain":"OTR","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PCT","plain":"PCT","plainChilds":"","childs":[]},{"content":"PE","plain":"PE","plainChilds":"","childs":[]},{"content":"PEM","plain":"PEM","plainChilds":"","childs":[]},{"content":"PHE","plain":"PHE","plainChilds":"","childs":[]},{"content":"PGP","plain":"PGP","plainChilds":"","childs":[]},{"content":"RMA","plain":"RMA","plainChilds":"","childs":[]},{"content":"RTD","plain":"RTD","plainChilds":"","childs":[]},{"content":"SCP","plain":"SCP","plainChilds":"","childs":[]},{"content":"SCVP","plain":"SCVP","plainChilds":"","childs":[]},{"content":"SEND","plain":"SEND","plainChilds":"","childs":[]},{"content":"SRTP","plain":"SRTP","plainChilds":"","childs":[]},{"content":"SSH","plain":"SSH","plainChilds":"","childs":[]},{"content":"SSL","plain":"SSL","plainChilds":"","childs":[]},{"content":"TSP","plain":"TSP","plainChilds":"","childs":[]},{"content":"TLS","plain":"TLS","plainChilds":"","childs":[]},{"content":"VBR","plain":"VBR","plainChilds":"","childs":[]},{"content":"WPA","plain":"WPA","plainChilds":"","childs":[]},{"content":"WPS","plain":"WPS","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"CVE Details":{"plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","childs":{"0":[[{"content":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)","plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","plainChilds":"","childs":[]}]]}}},{"tag":"Bouncy Castle - http://bouncycastle.org/","descr":"Bouncy Castle is a collection of APIs used in cryptography. It includes APIs for both the Java and the C# programming languages. The APIs are supported by a registered Australian charitable organization: Legion of the Bouncy Castle Inc.","License":{"plain":"- MIT\n","childs":{"0":[[{"content":"MIT","plain":"MIT\n","plainChilds":"","childs":[]}]]}},"Repository":{"plain":"","childs":{"0":[""]}},"Description":{"plain":"The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP.","childs":{"0":["The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP."]}},"Interface Languages":{"plain":"- Java FIPS\n","childs":{"0":[[{"content":"Java FIPS","plain":"Java FIPS\n","plainChilds":"","childs":[]}]]}},"Development Languages":{"plain":"- C#\n- Java\n","childs":{"0":[[{"content":"C#","plain":"C#\n","plainChilds":"","childs":[]},{"content":"Java","plain":"Java\n","plainChilds":"","childs":[]}]]}},"Metadata":{"plain":"- Release: 1.0.0\n","childs":{"0":[[{"content":"Release: 1.0.0","plain":"Release: 1.0.0\n","plainChilds":"","childs":[]}]]}},"CVE Vendor":{"plain":"bouncycastle","childs":{"0":["bouncycastle"]}},"CVE Product":{"plain":"legion-of-the-bouncy-castle-java-crytography-api","childs":{"0":["legion-of-the-bouncy-castle-java-crytography-api"]}},"CVE Details":{"plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","childs":{"0":[[{"content":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)","plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","plainChilds":"","childs":[]}]]}}},{"tag":"cryptlib - http://www.cryptlib.com/","descr":"cryptlib is an open source cross-platform software security toolkit library. It is distributed under the Sleepycat License, a free software license compatible with the GNU General Public License.[3] Alternatively, cryptlib is available under a standard commercial license for those preferring to use it under commercial terms.","License":{"plain":"- Sleepycat\n","childs":{"0":[[{"content":"Sleepycat","plain":"Sleepycat\n","plainChilds":"","childs":[]}]]}},"Repository":{"plain":"","childs":{"0":[""]}},"Description":{"plain":"The cryptlib Security Software Development Toolkit allows even inexperienced developers to easily add world-class security services to their applications by learning a single API. cryptlib manages all your SSL, SSH, TLS, S/MIME, PGP, OpenPGP, PKI, X.509, CMP, OCSP and SCEP security requirements, and more. cryptlib was designed by security experts, but not exclusively for security experts. It is highly efficient and has been rigorously tested across a wide range of operating systems and platforms over the last 18 years. The cryptlib software has been deployed and proven in many different sectors, and our clients state that it is the only security software development toolkit you’ll ever need.","childs":{"0":["The cryptlib Security Software Development Toolkit allows even inexperienced developers to easily add world-class security services to their applications by learning a single API. cryptlib manages all your SSL, SSH, TLS, S/MIME, PGP, OpenPGP, PKI, X.509, CMP, OCSP and SCEP security requirements, and more. cryptlib was designed by security experts, but not exclusively for security experts. It is highly efficient and has been rigorously tested across a wide range of operating systems and platforms over the last 18 years. The cryptlib software has been deployed and proven in many different sectors, and our clients state that it is the only security software development toolkit you’ll ever need."]}},"Development Languages":{"plain":"- C\n","childs":{"0":[[{"content":"C","plain":"C\n","plainChilds":"","childs":[]}]]}},"Metadata":{"plain":"- Release: 3.4.3.1\n","childs":{"0":[[{"content":"Release: 3.4.3.1","plain":"Release: 3.4.3.1\n","plainChilds":"","childs":[]}]]}}},{"tag":"Botan - https://botan.randombit.net/","descr":"Botan is a BSD-licensed cryptographic library written in C++. It provides a wide variety of cryptographic algorithms, formats, and protocols, e.g. SSL and TLS. It is used in the Monotone distributed revision control program, the OpenDNSSEC system, and ISC's Kea DHCP server among other projects.","License":{"plain":"- BSD-2-Clause\n","childs":{"0":[[{"content":"BSD-2-Clause","plain":"BSD-2-Clause\n","plainChilds":"","childs":[]}]]}},"Description":{"plain":"Botan's goal is to be the best option for cryptography in new C++ code by offering the tools necessary to implement a range of practical systems, such as TLS/DTLS, PKIX certificate handling, PKCS#11 and TPM hardware support, password hashing, and post quantum crypto schemes. In addition to the C++, botan has a C89 API specifically designed to be easy to call from other languages. A Python binding using ctypes is included, and several other language bindings are available.","childs":{"0":["Botan's goal is to be the best option for cryptography in new C++ code by offering the tools necessary to implement a range of practical systems, such as TLS/DTLS, PKIX certificate handling, PKCS#11 and TPM hardware support, password hashing, and post quantum crypto schemes. In addition to the C++, botan has a C89 API specifically designed to be easy to call from other languages. A Python binding using ctypes is included, and several other language bindings are available."]}},"Repository":{},"Archive":{"plain":"- https://github.com/randombit/botan/archive/2.0.0.zip\n","childs":{"0":[[{"content":"https://github.com/randombit/botan/archive/2.0.0.zip","plain":"https://github.com/randombit/botan/archive/2.0.0.zip\n","plainChilds":"","childs":[]}]]}},"Interface Languages":{"plain":"- C++11\n","childs":{"0":[[{"content":"C++11","plain":"C++11\n","plainChilds":"","childs":[]}]]}},"Metadata":{"plain":"- Release Date: 2017-01-07\n- Release: 2.0.0\n","childs":{"0":[[{"content":"Release Date: 2017-01-07","plain":"Release Date: 2017-01-07\n","plainChilds":"","childs":[]},{"content":"Release: 2.0.0","plain":"Release: 2.0.0","plainChilds":"","childs":[]}]]}},"CVE Vendor":{"plain":"botan_project","childs":{"0":["botan_project"]}},"CVE Product":{"plain":"botan","childs":{"0":["botan"]}},"Development Languages":{"plain":"- C++\n- Python\n- C\n","childs":{"0":[[{"content":"C++","plain":"C++","plainChilds":"","childs":[]},{"content":"Python","plain":"Python","plainChilds":"","childs":[]},{"content":"C","plain":"C","plainChilds":"","childs":[]}]]}},"Block Ciphers":{"plain":"","childs":{"0":[[{"content":"AES","plain":"AES","plainChilds":"","childs":[]},{"content":"AES-128","plain":"AES-128","plainChilds":"","childs":[]},{"content":"AES-192","plain":"AES-192","plainChilds":"","childs":[]},{"content":"AES-256","plain":"AES-256","plainChilds":"","childs":[]},{"content":"Blowfish","plain":"Blowfish","plainChilds":"","childs":[]},{"content":"Camellia","plain":"Camellia","plainChilds":"","childs":[]},{"content":"CAST","plain":"CAST","plainChilds":"","childs":[]},{"content":"CAST-128","plain":"CAST-128","plainChilds":"","childs":[]},{"content":"CAST-256","plain":"CAST-256","plainChilds":"","childs":[]},{"content":"DES","plain":"DES","plainChilds":"","childs":[]},{"content":"DEAL","plain":"DEAL","plainChilds":"","childs":[]},{"content":"FPE","plain":"FPE","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"IDEA","plain":"IDEA","plainChilds":"","childs":[]},{"content":"KASUMI","plain":"KASUMI","plainChilds":"","childs":[]},{"content":"M6","plain":"M6","plainChilds":"","childs":[]},{"content":"M8","plain":"M8","plainChilds":"","childs":[]},{"content":"Mercy","plain":"Mercy","plainChilds":"","childs":[]},{"content":"MISTY1","plain":"MISTY1","plainChilds":"","childs":[]},{"content":"NDS","plain":"NDS","plainChilds":"","childs":[]},{"content":"NOEKEON","plain":"NOEKEON","plainChilds":"","childs":[]},{"content":"PRESENT","plain":"PRESENT","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"RC5","plain":"RC5","plainChilds":"","childs":[]},{"content":"SAFER","plain":"SAFER","plainChilds":"","childs":[]},{"content":"Serpent","plain":"Serpent","plainChilds":"","childs":[]},{"content":"SEED","plain":"SEED","plainChilds":"","childs":[]},{"content":"Simon","plain":"Simon","plainChilds":"","childs":[]},{"content":"Threefish","plain":"Threefish","plainChilds":"","childs":[]},{"content":"Twofish","plain":"Twofish","plainChilds":"","childs":[]},{"content":"XTEA","plain":"XTEA","plainChilds":"","childs":[]}]]}},"Stream Ciphers":{"plain":"","childs":{"0":[[{"content":"ChaCha","plain":"ChaCha","plainChilds":"","childs":[]},{"content":"Dragon","plain":"Dragon","plainChilds":"","childs":[]},{"content":"eSTREAM","plain":"eSTREAM","plainChilds":"","childs":[]},{"content":"LEX","plain":"LEX","plainChilds":"","childs":[]},{"content":"MAG","plain":"MAG","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"Salsa","plain":"Salsa","plainChilds":"","childs":[]},{"content":"Turing","plain":"Turing","plainChilds":"","childs":[]}]]}},"Hash Functions":{"plain":"","childs":{"0":[[{"content":"BLAKE2","plain":"BLAKE2","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"MD5","plain":"MD5","plainChilds":"","childs":[]},{"content":"PBKDF2","plain":"PBKDF2","plainChilds":"","childs":[]},{"content":"RIPEMD","plain":"RIPEMD","plainChilds":"","childs":[]},{"content":"scrypt","plain":"scrypt","plainChilds":"","childs":[]},{"content":"SHA","plain":"SHA","plainChilds":"","childs":[]},{"content":"SHA-1","plain":"SHA-1","plainChilds":"","childs":[]},{"content":"SHA-2","plain":"SHA-2","plainChilds":"","childs":[]},{"content":"SHA-3","plain":"SHA-3","plainChilds":"","childs":[]},{"content":"SHA-256","plain":"SHA-256","plainChilds":"","childs":[]},{"content":"SHA-512","plain":"SHA-512","plainChilds":"","childs":[]},{"content":"SipHash","plain":"SipHash","plainChilds":"","childs":[]},{"content":"Skein","plain":"Skein","plainChilds":"","childs":[]},{"content":"Tiger","plain":"Tiger","plainChilds":"","childs":[]},{"content":"WHIRLPOOL","plain":"WHIRLPOOL","plainChilds":"","childs":[]}]]}},"Encryption Modes":{"plain":"","childs":{"0":[[{"content":"BPS","plain":"BPS","plainChilds":"","childs":[]},{"content":"CBC","plain":"CBC","plainChilds":"","childs":[]},{"content":"CCM","plain":"CCM","plainChilds":"","childs":[]},{"content":"CFB","plain":"CFB","plainChilds":"","childs":[]},{"content":"CTR","plain":"CTR","plainChilds":"","childs":[]},{"content":"EAX","plain":"EAX","plainChilds":"","childs":[]},{"content":"ECB","plain":"ECB","plainChilds":"","childs":[]},{"content":"FFX","plain":"FFX","plainChilds":"","childs":[]},{"content":"GCM","plain":"GCM","plainChilds":"","childs":[]},{"content":"IOC","plain":"IOC","plainChilds":"","childs":[]},{"content":"OCB","plain":"OCB","plainChilds":"","childs":[]},{"content":"OFB","plain":"OFB","plainChilds":"","childs":[]},{"content":"SIV","plain":"SIV","plainChilds":"","childs":[]}]]}},"Message Authentication Codes":{"plain":"","childs":{"0":[[{"content":"HMAC","plain":"HMAC","plainChilds":"","childs":[]},{"content":"Poly1305","plain":"Poly1305","plainChilds":"","childs":[]}]]}},"Public Key Cryptography":{"plain":"","childs":{"0":[[{"content":"DH","plain":"DH","plainChilds":"","childs":[]},{"content":"DSA","plain":"DSA","plainChilds":"","childs":[]},{"content":"DSS","plain":"DSS","plainChilds":"","childs":[]},{"content":"ECDH","plain":"ECDH","plainChilds":"","childs":[]},{"content":"ECDSA","plain":"ECDSA","plainChilds":"","childs":[]},{"content":"ElGamal","plain":"ElGamal","plainChilds":"","childs":[]},{"content":"McEliece","plain":"McEliece","plainChilds":"","childs":[]},{"content":"RSA","plain":"RSA","plainChilds":"","childs":[]}]]}},"Public Key Infrastructure":{"plain":"","childs":{"0":[[{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"Identrus","plain":"Identrus","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PKCS","plain":"PKCS","plainChilds":"","childs":[]},{"content":"PKIX","plain":"PKIX","plainChilds":"","childs":[]},{"content":"SET","plain":"SET","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"Protocols":{"plain":"","childs":{"0":[[{"content":"AS2","plain":"AS2","plainChilds":"","childs":[]},{"content":"AKA","plain":"AKA","plainChilds":"","childs":[]},{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"CSR","plain":"CSR","plainChilds":"","childs":[]},{"content":"CMS","plain":"CMS","plainChilds":"","childs":[]},{"content":"DTLS","plain":"DTLS","plainChilds":"","childs":[]},{"content":"DPD","plain":"DPD","plainChilds":"","childs":[]},{"content":"DCII","plain":"DCII","plainChilds":"","childs":[]},{"content":"EST","plain":"EST","plainChilds":"","childs":[]},{"content":"GPG","plain":"GPG","plainChilds":"","childs":[]},{"content":"HTTPS","plain":"HTTPS","plainChilds":"","childs":[]},{"content":"IKE","plain":"IKE","plainChilds":"","childs":[]},{"content":"OTR","plain":"OTR","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PE","plain":"PE","plainChilds":"","childs":[]},{"content":"PEM","plain":"PEM","plainChilds":"","childs":[]},{"content":"PGP","plain":"PGP","plainChilds":"","childs":[]},{"content":"SEND","plain":"SEND","plainChilds":"","childs":[]},{"content":"SRTP","plain":"SRTP","plainChilds":"","childs":[]},{"content":"SSL","plain":"SSL","plainChilds":"","childs":[]},{"content":"TLS","plain":"TLS","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"CVE Details":{"plain":"- A cryptographic cache-based side channel in the RSA implementation in Botan before 1.10.17, and 1.11.x and 2.x before 2.3.0, allows a local attacker to recover information about RSA secret keys, as demonstrated by CacheD. This occurs because an array is indexed with bits derived from a secret key. (<https://cve.circl.lu/cve/CVE-2017-14737>)\n - A programming error exists in a way Randombit Botan cryptographic library version 2.0.1 implements x500 string comparisons which could lead to certificate verification issues and abuse. A specially crafted X509 certificate would need to be delivered to the client or server application in order to trigger this vulnerability. (<https://cve.circl.lu/cve/CVE-2017-2801>)\n - The X509_Certificate::allowed_usage function in botan 1.11.x before 1.11.31 might allow attackers to have unspecified impact by leveraging a call with more than one Key_Usage set in the enum value. (<https://cve.circl.lu/cve/CVE-2016-6879>)\n - The Curve25519 code in botan before 1.11.31, on systems without a native 128-bit integer type, might allow attackers to have unspecified impact via vectors related to undefined behavior, as demonstrated on 32-bit ARM systems compiled by Clang. (<https://cve.circl.lu/cve/CVE-2016-6878>)\n - botan 1.11.x before 1.11.22 makes it easier for remote attackers to decrypt TLS ciphertext data via a padding-oracle attack against TLS CBC ciphersuites. (<https://cve.circl.lu/cve/CVE-2015-7824>)\n - botan before 1.11.22 improperly validates certificate paths, which allows remote attackers to cause a denial of service (infinite loop and memory consumption) via a certificate with a loop in the certificate chain. (<https://cve.circl.lu/cve/CVE-2015-7825>)\n - botan 1.11.x before 1.11.22 improperly handles wildcard matching against hostnames, which might allow remote attackers to have unspecified impact via a valid X.509 certificate, as demonstrated by accepting *.example.com as a match for bar.foo.example.com. (<https://cve.circl.lu/cve/CVE-2015-7826>)\n - In Botan 1.8.0 through 1.11.33, when decoding BER data an integer overflow could occur, which would cause an incorrect length field to be computed. Some API callers may use the returned (incorrect and attacker controlled) length field in a way which later causes memory corruption or other failure. (<https://cve.circl.lu/cve/CVE-2016-9132>)\n - In Botan 1.11.29 through 1.11.32, RSA decryption with certain padding options had a detectable timing channel which could given sufficient queries be used to recover plaintext, aka an OAEP side channel attack. (<https://cve.circl.lu/cve/CVE-2016-8871>)\n - Botan before 1.10.13 and 1.11.x before 1.11.22 make it easier for remote attackers to conduct million-message attacks by measuring time differences, related to decoding of PKCS#1 padding. (<https://cve.circl.lu/cve/CVE-2015-7827>)\n - Botan before 1.10.13 and 1.11.x before 1.11.29 do not use a constant-time algorithm to perform a modular inverse on the signature nonce k, which might allow remote attackers to obtain ECDSA secret keys via a timing side-channel attack. (<https://cve.circl.lu/cve/CVE-2016-2849>)\n - Botan 1.11.x before 1.11.29 does not enforce TLS policy for (1) signature algorithms and (2) ECC curves, which allows remote attackers to conduct downgrade attacks via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2850>)\n - The ressol function in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (infinite loop) via unspecified input to the OS2ECP function, related to a composite modulus. (<https://cve.circl.lu/cve/CVE-2016-2194>)\n - Integer overflow in the PointGFp constructor in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to overwrite memory and possibly execute arbitrary code via a crafted ECC point, which triggers a heap-based buffer overflow. (<https://cve.circl.lu/cve/CVE-2016-2195>)\n - Heap-based buffer overflow in the P-521 reduction function in Botan 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (memory overwrite and crash) or execute arbitrary code via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2196>)\n - The BER decoder in Botan 0.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (application crash) via an empty BIT STRING in ASN.1 data. (<https://cve.circl.lu/cve/CVE-2015-5726>)\n - The Miller-Rabin primality check in Botan before 1.10.8 and 1.11.x before 1.11.9 improperly uses a single random base, which makes it easier for remote attackers to defeat cryptographic protection mechanisms via a DH group. (<https://cve.circl.lu/cve/CVE-2014-9742>)\n - The BER decoder in Botan 1.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (memory consumption) via unspecified vectors, related to a length field. (<https://cve.circl.lu/cve/CVE-2015-5727>)\u0000","childs":{"0":[[{"content":"- A cryptographic cache-based side channel in the RSA implementation in Botan before 1.10.17, and 1.11.x and 2.x before 2.3.0, allows a local attacker to recover information about RSA secret keys, as demonstrated by CacheD. This occurs because an array is indexed with bits derived from a secret key. (<https://cve.circl.lu/cve/CVE-2017-14737>)\n - A programming error exists in a way Randombit Botan cryptographic library version 2.0.1 implements x500 string comparisons which could lead to certificate verification issues and abuse. A specially crafted X509 certificate would need to be delivered to the client or server application in order to trigger this vulnerability. (<https://cve.circl.lu/cve/CVE-2017-2801>)\n - The X509_Certificate::allowed_usage function in botan 1.11.x before 1.11.31 might allow attackers to have unspecified impact by leveraging a call with more than one Key_Usage set in the enum value. (<https://cve.circl.lu/cve/CVE-2016-6879>)\n - The Curve25519 code in botan before 1.11.31, on systems without a native 128-bit integer type, might allow attackers to have unspecified impact via vectors related to undefined behavior, as demonstrated on 32-bit ARM systems compiled by Clang. (<https://cve.circl.lu/cve/CVE-2016-6878>)\n - botan 1.11.x before 1.11.22 makes it easier for remote attackers to decrypt TLS ciphertext data via a padding-oracle attack against TLS CBC ciphersuites. (<https://cve.circl.lu/cve/CVE-2015-7824>)\n - botan before 1.11.22 improperly validates certificate paths, which allows remote attackers to cause a denial of service (infinite loop and memory consumption) via a certificate with a loop in the certificate chain. (<https://cve.circl.lu/cve/CVE-2015-7825>)\n - botan 1.11.x before 1.11.22 improperly handles wildcard matching against hostnames, which might allow remote attackers to have unspecified impact via a valid X.509 certificate, as demonstrated by accepting *.example.com as a match for bar.foo.example.com. (<https://cve.circl.lu/cve/CVE-2015-7826>)\n - In Botan 1.8.0 through 1.11.33, when decoding BER data an integer overflow could occur, which would cause an incorrect length field to be computed. Some API callers may use the returned (incorrect and attacker controlled) length field in a way which later causes memory corruption or other failure. (<https://cve.circl.lu/cve/CVE-2016-9132>)\n - In Botan 1.11.29 through 1.11.32, RSA decryption with certain padding options had a detectable timing channel which could given sufficient queries be used to recover plaintext, aka an OAEP side channel attack. (<https://cve.circl.lu/cve/CVE-2016-8871>)\n - Botan before 1.10.13 and 1.11.x before 1.11.22 make it easier for remote attackers to conduct million-message attacks by measuring time differences, related to decoding of PKCS#1 padding. (<https://cve.circl.lu/cve/CVE-2015-7827>)\n - Botan before 1.10.13 and 1.11.x before 1.11.29 do not use a constant-time algorithm to perform a modular inverse on the signature nonce k, which might allow remote attackers to obtain ECDSA secret keys via a timing side-channel attack. (<https://cve.circl.lu/cve/CVE-2016-2849>)\n - Botan 1.11.x before 1.11.29 does not enforce TLS policy for (1) signature algorithms and (2) ECC curves, which allows remote attackers to conduct downgrade attacks via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2850>)\n - The ressol function in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (infinite loop) via unspecified input to the OS2ECP function, related to a composite modulus. (<https://cve.circl.lu/cve/CVE-2016-2194>)\n - Integer overflow in the PointGFp constructor in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to overwrite memory and possibly execute arbitrary code via a crafted ECC point, which triggers a heap-based buffer overflow. (<https://cve.circl.lu/cve/CVE-2016-2195>)\n - Heap-based buffer overflow in the P-521 reduction function in Botan 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (memory overwrite and crash) or execute arbitrary code via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2196>)\n - The BER decoder in Botan 0.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (application crash) via an empty BIT STRING in ASN.1 data. (<https://cve.circl.lu/cve/CVE-2015-5726>)\n - The Miller-Rabin primality check in Botan before 1.10.8 and 1.11.x before 1.11.9 improperly uses a single random base, which makes it easier for remote attackers to defeat cryptographic protection mechanisms via a DH group. (<https://cve.circl.lu/cve/CVE-2014-9742>)\n - The BER decoder in Botan 1.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (memory consumption) via unspecified vectors, related to a length field. (<https://cve.circl.lu/cve/CVE-2015-5727>)","plain":"- A cryptographic cache-based side channel in the RSA implementation in Botan before 1.10.17, and 1.11.x and 2.x before 2.3.0, allows a local attacker to recover information about RSA secret keys, as demonstrated by CacheD. This occurs because an array is indexed with bits derived from a secret key. (<https://cve.circl.lu/cve/CVE-2017-14737>)\n - A programming error exists in a way Randombit Botan cryptographic library version 2.0.1 implements x500 string comparisons which could lead to certificate verification issues and abuse. A specially crafted X509 certificate would need to be delivered to the client or server application in order to trigger this vulnerability. (<https://cve.circl.lu/cve/CVE-2017-2801>)\n - The X509_Certificate::allowed_usage function in botan 1.11.x before 1.11.31 might allow attackers to have unspecified impact by leveraging a call with more than one Key_Usage set in the enum value. (<https://cve.circl.lu/cve/CVE-2016-6879>)\n - The Curve25519 code in botan before 1.11.31, on systems without a native 128-bit integer type, might allow attackers to have unspecified impact via vectors related to undefined behavior, as demonstrated on 32-bit ARM systems compiled by Clang. (<https://cve.circl.lu/cve/CVE-2016-6878>)\n - botan 1.11.x before 1.11.22 makes it easier for remote attackers to decrypt TLS ciphertext data via a padding-oracle attack against TLS CBC ciphersuites. (<https://cve.circl.lu/cve/CVE-2015-7824>)\n - botan before 1.11.22 improperly validates certificate paths, which allows remote attackers to cause a denial of service (infinite loop and memory consumption) via a certificate with a loop in the certificate chain. (<https://cve.circl.lu/cve/CVE-2015-7825>)\n - botan 1.11.x before 1.11.22 improperly handles wildcard matching against hostnames, which might allow remote attackers to have unspecified impact via a valid X.509 certificate, as demonstrated by accepting *.example.com as a match for bar.foo.example.com. (<https://cve.circl.lu/cve/CVE-2015-7826>)\n - In Botan 1.8.0 through 1.11.33, when decoding BER data an integer overflow could occur, which would cause an incorrect length field to be computed. Some API callers may use the returned (incorrect and attacker controlled) length field in a way which later causes memory corruption or other failure. (<https://cve.circl.lu/cve/CVE-2016-9132>)\n - In Botan 1.11.29 through 1.11.32, RSA decryption with certain padding options had a detectable timing channel which could given sufficient queries be used to recover plaintext, aka an OAEP side channel attack. (<https://cve.circl.lu/cve/CVE-2016-8871>)\n - Botan before 1.10.13 and 1.11.x before 1.11.22 make it easier for remote attackers to conduct million-message attacks by measuring time differences, related to decoding of PKCS#1 padding. (<https://cve.circl.lu/cve/CVE-2015-7827>)\n - Botan before 1.10.13 and 1.11.x before 1.11.29 do not use a constant-time algorithm to perform a modular inverse on the signature nonce k, which might allow remote attackers to obtain ECDSA secret keys via a timing side-channel attack. (<https://cve.circl.lu/cve/CVE-2016-2849>)\n - Botan 1.11.x before 1.11.29 does not enforce TLS policy for (1) signature algorithms and (2) ECC curves, which allows remote attackers to conduct downgrade attacks via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2850>)\n - The ressol function in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (infinite loop) via unspecified input to the OS2ECP function, related to a composite modulus. (<https://cve.circl.lu/cve/CVE-2016-2194>)\n - Integer overflow in the PointGFp constructor in Botan before 1.10.11 and 1.11.x before 1.11.27 allows remote attackers to overwrite memory and possibly execute arbitrary code via a crafted ECC point, which triggers a heap-based buffer overflow. (<https://cve.circl.lu/cve/CVE-2016-2195>)\n - Heap-based buffer overflow in the P-521 reduction function in Botan 1.11.x before 1.11.27 allows remote attackers to cause a denial of service (memory overwrite and crash) or execute arbitrary code via unspecified vectors. (<https://cve.circl.lu/cve/CVE-2016-2196>)\n - The BER decoder in Botan 0.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (application crash) via an empty BIT STRING in ASN.1 data. (<https://cve.circl.lu/cve/CVE-2015-5726>)\n - The Miller-Rabin primality check in Botan before 1.10.8 and 1.11.x before 1.11.9 improperly uses a single random base, which makes it easier for remote attackers to defeat cryptographic protection mechanisms via a DH group. (<https://cve.circl.lu/cve/CVE-2014-9742>)\n - The BER decoder in Botan 1.10.x before 1.10.10 and 1.11.x before 1.11.19 allows remote attackers to cause a denial of service (memory consumption) via unspecified vectors, related to a length field. (<https://cve.circl.lu/cve/CVE-2015-5727>)\u0000","plainChilds":"","childs":[]}]]}}},{"tag":"Bouncy Castle - http://bouncycastle.org/","descr":"Bouncy Castle is a collection of APIs used in cryptography. It includes APIs for both the Java and the C# programming languages. The APIs are supported by a registered Australian charitable organization: Legion of the Bouncy Castle Inc.","License":{"plain":"- MIT\n","childs":{"0":[[{"content":"MIT","plain":"MIT\n","plainChilds":"","childs":[]}]]}},"Description":{"plain":"The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP.","childs":{"0":["The Bouncy Castle Crypto package is a C# implementation of cryptographic algorithms and protocols, it was developed by the Legion of the Bouncy Castle, a registered Australian Charity, with a little help! The Legion, and the latest goings on with this package, can be found at http://www.bouncycastle.org. In addition to providing basic cryptography algorithms, the package also provides support for CMS, TSP, X.509 certificate generation and a variety of other standards such as OpenPGP."]}},"Repository":{},"Interface Languages":{"plain":"- C#\n","childs":{"0":[[{"content":"C#","plain":"C#\n","plainChilds":"","childs":[]}]]}},"Development Languages":{"plain":"- C#\n- Java\n","childs":{"0":[[{"content":"C#","plain":"C#\n","plainChilds":"","childs":[]},{"content":"Java","plain":"Java\n","plainChilds":"","childs":[]}]]}},"CVE Vendor":{"plain":"bouncycastle","childs":{"0":["bouncycastle"]}},"CVE Product":{"plain":"legion-of-the-bouncy-castle-java-crytography-api","childs":{"0":["legion-of-the-bouncy-castle-java-crytography-api"]}},"Metadata":{"plain":"- Release: Latest\n- Stars: 406\n","childs":{"0":[[{"content":"Release: Latest","plain":"Release: Latest","plainChilds":"","childs":[]},{"content":"Stars: 406","plain":"Stars: 406","plainChilds":"","childs":[]}]]}},"Block Ciphers":{"plain":"","childs":{"0":[[{"content":"3-Way","plain":"3-Way","plainChilds":"","childs":[]},{"content":"AES","plain":"AES","plainChilds":"","childs":[]},{"content":"AES-128","plain":"AES-128","plainChilds":"","childs":[]},{"content":"AES-192","plain":"AES-192","plainChilds":"","childs":[]},{"content":"AES-256","plain":"AES-256","plainChilds":"","childs":[]},{"content":"Blowfish","plain":"Blowfish","plainChilds":"","childs":[]},{"content":"Camellia","plain":"Camellia","plainChilds":"","childs":[]},{"content":"CAST","plain":"CAST","plainChilds":"","childs":[]},{"content":"DES","plain":"DES","plainChilds":"","childs":[]},{"content":"DEAL","plain":"DEAL","plainChilds":"","childs":[]},{"content":"DFC","plain":"DFC","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"IDEA NXT","plain":"IDEA NXT","plainChilds":"","childs":[]},{"content":"IDEA","plain":"IDEA","plainChilds":"","childs":[]},{"content":"M6","plain":"M6","plainChilds":"","childs":[]},{"content":"M8","plain":"M8","plainChilds":"","childs":[]},{"content":"MMB","plain":"MMB","plainChilds":"","childs":[]},{"content":"NDS","plain":"NDS","plainChilds":"","childs":[]},{"content":"NOEKEON","plain":"NOEKEON","plainChilds":"","childs":[]},{"content":"PRESENT","plain":"PRESENT","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"RC2","plain":"RC2","plainChilds":"","childs":[]},{"content":"RC5","plain":"RC5","plainChilds":"","childs":[]},{"content":"RC6","plain":"RC6","plainChilds":"","childs":[]},{"content":"Serpent","plain":"Serpent","plainChilds":"","childs":[]},{"content":"SEED","plain":"SEED","plainChilds":"","childs":[]},{"content":"SM4","plain":"SM4","plainChilds":"","childs":[]},{"content":"Threefish","plain":"Threefish","plainChilds":"","childs":[]},{"content":"TEA","plain":"TEA","plainChilds":"","childs":[]},{"content":"3DES","plain":"3DES","plainChilds":"","childs":[]},{"content":"Twofish","plain":"Twofish","plainChilds":"","childs":[]},{"content":"UES","plain":"UES","plainChilds":"","childs":[]}]]}},"Stream Ciphers":{"plain":"","childs":{"0":[[{"content":"ChaCha","plain":"ChaCha","plainChilds":"","childs":[]},{"content":"eSTREAM","plain":"eSTREAM","plainChilds":"","childs":[]},{"content":"ISAAC","plain":"ISAAC","plainChilds":"","childs":[]},{"content":"LEX","plain":"LEX","plainChilds":"","childs":[]},{"content":"MAG","plain":"MAG","plainChilds":"","childs":[]},{"content":"Py","plain":"Py","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"Salsa","plain":"Salsa","plainChilds":"","childs":[]},{"content":"ZUC","plain":"ZUC","plainChilds":"","childs":[]}]]}},"Hash Functions":{"plain":"","childs":{"0":[[{"content":"BLAKE2","plain":"BLAKE2","plainChilds":"","childs":[]},{"content":"FSB","plain":"FSB","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"MD2","plain":"MD2","plainChilds":"","childs":[]},{"content":"MD5","plain":"MD5","plainChilds":"","childs":[]},{"content":"MD6","plain":"MD6","plainChilds":"","childs":[]},{"content":"RIPEMD","plain":"RIPEMD","plainChilds":"","childs":[]},{"content":"scrypt","plain":"scrypt","plainChilds":"","childs":[]},{"content":"SHA","plain":"SHA","plainChilds":"","childs":[]},{"content":"SHA-1","plain":"SHA-1","plainChilds":"","childs":[]},{"content":"SHA-2","plain":"SHA-2","plainChilds":"","childs":[]},{"content":"SHA-3","plain":"SHA-3","plainChilds":"","childs":[]},{"content":"SHA-256","plain":"SHA-256","plainChilds":"","childs":[]},{"content":"SHA-512","plain":"SHA-512","plainChilds":"","childs":[]},{"content":"SipHash","plain":"SipHash","plainChilds":"","childs":[]},{"content":"Skein","plain":"Skein","plainChilds":"","childs":[]},{"content":"WHIRLPOOL","plain":"WHIRLPOOL","plainChilds":"","childs":[]}]]}},"Encryption Modes":{"plain":"","childs":{"0":[[{"content":"ABC","plain":"ABC","plainChilds":"","childs":[]},{"content":"CBC","plain":"CBC","plainChilds":"","childs":[]},{"content":"CCM","plain":"CCM","plainChilds":"","childs":[]},{"content":"CFB","plain":"CFB","plainChilds":"","childs":[]},{"content":"CTR","plain":"CTR","plainChilds":"","childs":[]},{"content":"EAX","plain":"EAX","plainChilds":"","childs":[]},{"content":"ECB","plain":"ECB","plainChilds":"","childs":[]},{"content":"FFX","plain":"FFX","plainChilds":"","childs":[]},{"content":"GCM","plain":"GCM","plainChilds":"","childs":[]},{"content":"IGE","plain":"IGE","plainChilds":"","childs":[]},{"content":"IOC","plain":"IOC","plainChilds":"","childs":[]},{"content":"OCB","plain":"OCB","plainChilds":"","childs":[]},{"content":"OFB","plain":"OFB","plainChilds":"","childs":[]},{"content":"RAC","plain":"RAC","plainChilds":"","childs":[]},{"content":"RKC","plain":"RKC","plainChilds":"","childs":[]},{"content":"SIV","plain":"SIV","plainChilds":"","childs":[]}]]}},"Message Authentication Codes":{"plain":"","childs":{"0":[[{"content":"HMAC","plain":"HMAC","plainChilds":"","childs":[]},{"content":"OMAC","plain":"OMAC","plainChilds":"","childs":[]},{"content":"Poly1305","plain":"Poly1305","plainChilds":"","childs":[]}]]}},"Public Key Cryptography":{"plain":"","childs":{"0":[[{"content":"DH","plain":"DH","plainChilds":"","childs":[]},{"content":"DSA","plain":"DSA","plainChilds":"","childs":[]},{"content":"DSS","plain":"DSS","plainChilds":"","childs":[]},{"content":"ECDH","plain":"ECDH","plainChilds":"","childs":[]},{"content":"ECDSA","plain":"ECDSA","plainChilds":"","childs":[]},{"content":"LUC","plain":"LUC","plainChilds":"","childs":[]},{"content":"RSA","plain":"RSA","plainChilds":"","childs":[]},{"content":"YAK","plain":"YAK","plainChilds":"","childs":[]}]]}},"Public Key Infrastructure":{"plain":"","childs":{"0":[[{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"LDAP","plain":"LDAP","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PKCS","plain":"PKCS","plainChilds":"","childs":[]},{"content":"PKIX","plain":"PKIX","plainChilds":"","childs":[]},{"content":"SET","plain":"SET","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"Protocols":{"plain":"","childs":{"0":[[{"content":"AS1","plain":"AS1","plainChilds":"","childs":[]},{"content":"AKA","plain":"AKA","plainChilds":"","childs":[]},{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"CSR","plain":"CSR","plainChilds":"","childs":[]},{"content":"CMS","plain":"CMS","plainChilds":"","childs":[]},{"content":"DTLS","plain":"DTLS","plainChilds":"","childs":[]},{"content":"DPD","plain":"DPD","plainChilds":"","childs":[]},{"content":"DPV","plain":"DPV","plainChilds":"","childs":[]},{"content":"EST","plain":"EST","plainChilds":"","childs":[]},{"content":"GPG","plain":"GPG","plainChilds":"","childs":[]},{"content":"HTTPS","plain":"HTTPS","plainChilds":"","childs":[]},{"content":"I2P","plain":"I2P","plainChilds":"","childs":[]},{"content":"IES","plain":"IES","plainChilds":"","childs":[]},{"content":"IKE","plain":"IKE","plainChilds":"","childs":[]},{"content":"ISAKMP","plain":"ISAKMP","plainChilds":"","childs":[]},{"content":"IPsec","plain":"IPsec","plainChilds":"","childs":[]},{"content":"MSE","plain":"MSE","plainChilds":"","childs":[]},{"content":"OTR","plain":"OTR","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PE","plain":"PE","plainChilds":"","childs":[]},{"content":"PEM","plain":"PEM","plainChilds":"","childs":[]},{"content":"PHE","plain":"PHE","plainChilds":"","childs":[]},{"content":"PGP","plain":"PGP","plainChilds":"","childs":[]},{"content":"RTD","plain":"RTD","plainChilds":"","childs":[]},{"content":"SCVP","plain":"SCVP","plainChilds":"","childs":[]},{"content":"SEND","plain":"SEND","plainChilds":"","childs":[]},{"content":"SRTP","plain":"SRTP","plainChilds":"","childs":[]},{"content":"SSH","plain":"SSH","plainChilds":"","childs":[]},{"content":"SSL","plain":"SSL","plainChilds":"","childs":[]},{"content":"TSP","plain":"TSP","plainChilds":"","childs":[]},{"content":"TLS","plain":"TLS","plainChilds":"","childs":[]},{"content":"VBR","plain":"VBR","plainChilds":"","childs":[]},{"content":"WPA","plain":"WPA","plainChilds":"","childs":[]},{"content":"WPS","plain":"WPS","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"CVE Details":{"plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","childs":{"0":[[{"content":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)","plain":"- ** DISPUTED ** The AES-GCM specification in RFC 5084, as used in Android 5.x and 6.x, recommends 12 octets for the aes-ICVlen parameter field, which might make it easier for attackers to defeat a cryptographic protection mechanism and discover an authentication key via a crafted application, aka internal bug 26234568.  NOTE: The vendor disputes the existence of this potential issue in Android, stating This CVE was raised in error: it referred to the authentication tag size in GCM, whose default according to ASN.1 encoding (12 bytes) can lead to vulnerabilities. After careful consideration, it was decided that the insecure default value of 12 bytes was a default only for the encoding and not default anywhere else in Android, and hence no vulnerability existed. (<https://cve.circl.lu/cve/CVE-2016-2427>)\n - The TLS implementation in the Bouncy Castle Java library before 1.48 and C# library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169. (<https://cve.circl.lu/cve/CVE-2013-1624>)\n - The Legion of the Bouncy Castle Java Cryptography API before release 1.38, as used in Crypto Provider Package before 1.36, has unknown impact and remote attack vectors related to a Bleichenbacher vulnerability in simple RSA CMS signatures without signed attributes. (<https://cve.circl.lu/cve/CVE-2007-6721>)\u0000","plainChilds":"","childs":[]}]]}}},{"tag":"Template - http://www.example.com","descr":"Default short description","Description":{"plain":"Default long description in __markdown__.","childs":{"0":["Default long description in __markdown__."]}},"Repository":{},"Archive":{"plain":"- https://github.com/example/example/archive/1.0.0.zip\n","childs":{"0":[[{"content":"https://github.com/example/example/archive/1.0.0.zip","plain":"https://github.com/example/example/archive/1.0.0.zip\n","plainChilds":"","childs":[]}]]}},"License":{"plain":"- MIT\n- Apache-2.0\n- MPL-2.0\n","childs":{"0":[[{"content":"MIT","plain":"MIT\n","plainChilds":"","childs":[]},{"content":"Apache-2.0","plain":"Apache-2.0\n","plainChilds":"","childs":[]},{"content":"MPL-2.0","plain":"MPL-2.0\n","plainChilds":"","childs":[]}]]}},"Metadata":{"plain":"- Release: 1.0.0\n- Release Date: Today\n","childs":{"0":[[{"content":"Release: 1.0.0","plain":"Release: 1.0.0\n","plainChilds":"","childs":[]},{"content":"Release Date: Today","plain":"Release Date: Today\n","plainChilds":"","childs":[]}]]}},"Interface Languages":{"plain":"- C++\n- Java\n","childs":{"0":[[{"content":"C++","plain":"C++\n","plainChilds":"","childs":[]},{"content":"Java","plain":"Java\n","plainChilds":"","childs":[]}]]}},"CVE Vendor":{"plain":"template-vendor","childs":{"0":["template-vendor"]}},"CVE Product":{"plain":"template-product","childs":{"0":["template-product"]}}},{"tag":"OpenSSL - www.openssl.org","descr":"OpenSSL is a software library for applications that secure communications over computer networks against eavesdropping or need to identify the party at the other end. It is widely used in internet web servers, serving a majority of all web sites.","License":{"plain":"- Apache-1.0\n- BSD-4-Clause\n","childs":{"0":[[{"content":"Apache-1.0","plain":"Apache-1.0\n","plainChilds":"","childs":[]},{"content":"BSD-4-Clause","plain":"BSD-4-Clause\n","plainChilds":"","childs":[]}]]}},"Repository":{},"CVE Vendor":{"plain":"openssl","childs":{"0":["openssl"]}},"CVE Product":{"plain":"openssl","childs":{"0":["openssl"]}},"Metadata":{"plain":"- Release: Latest\n- Stars: 6726\n","childs":{"0":[[{"content":"Release: Latest","plain":"Release: Latest","plainChilds":"","childs":[]},{"content":"Stars: 6726","plain":"Stars: 6726","plainChilds":"","childs":[]}]]}},"Development Languages":{"plain":"- C\n- C++\n- Python\n","childs":{"0":[[{"content":"C","plain":"C","plainChilds":"","childs":[]},{"content":"C++","plain":"C++","plainChilds":"","childs":[]},{"content":"Python","plain":"Python","plainChilds":"","childs":[]}]]}},"Block Ciphers":{"plain":"","childs":{"0":[[{"content":"3-Way","plain":"3-Way","plainChilds":"","childs":[]},{"content":"AES","plain":"AES","plainChilds":"","childs":[]},{"content":"AES-128","plain":"AES-128","plainChilds":"","childs":[]},{"content":"AES-192","plain":"AES-192","plainChilds":"","childs":[]},{"content":"AES-256","plain":"AES-256","plainChilds":"","childs":[]},{"content":"ARIA","plain":"ARIA","plainChilds":"","childs":[]},{"content":"ARIA-128","plain":"ARIA-128","plainChilds":"","childs":[]},{"content":"ARIA-192","plain":"ARIA-192","plainChilds":"","childs":[]},{"content":"ARIA-256","plain":"ARIA-256","plainChilds":"","childs":[]},{"content":"Blowfish","plain":"Blowfish","plainChilds":"","childs":[]},{"content":"Camellia","plain":"Camellia","plainChilds":"","childs":[]},{"content":"CAST","plain":"CAST","plainChilds":"","childs":[]},{"content":"CDMF","plain":"CDMF","plainChilds":"","childs":[]},{"content":"DES","plain":"DES","plainChilds":"","childs":[]},{"content":"DEAL","plain":"DEAL","plainChilds":"","childs":[]},{"content":"FEAL","plain":"FEAL","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"IDEA NXT","plain":"IDEA NXT","plainChilds":"","childs":[]},{"content":"IDEA","plain":"IDEA","plainChilds":"","childs":[]},{"content":"M6","plain":"M6","plainChilds":"","childs":[]},{"content":"M8","plain":"M8","plainChilds":"","childs":[]},{"content":"MESH","plain":"MESH","plainChilds":"","childs":[]},{"content":"MMB","plain":"MMB","plainChilds":"","childs":[]},{"content":"NOEKEON","plain":"NOEKEON","plainChilds":"","childs":[]},{"content":"PRESENT","plain":"PRESENT","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"RC2","plain":"RC2","plainChilds":"","childs":[]},{"content":"RC5","plain":"RC5","plainChilds":"","childs":[]},{"content":"RC6","plain":"RC6","plainChilds":"","childs":[]},{"content":"SAFER","plain":"SAFER","plainChilds":"","childs":[]},{"content":"SEED","plain":"SEED","plainChilds":"","childs":[]},{"content":"SM4","plain":"SM4","plainChilds":"","childs":[]},{"content":"3DES","plain":"3DES","plainChilds":"","childs":[]},{"content":"UES","plain":"UES","plainChilds":"","childs":[]}]]}},"Stream Ciphers":{"plain":"","childs":{"0":[[{"content":"ChaCha","plain":"ChaCha","plainChilds":"","childs":[]},{"content":"Crypto1","plain":"Crypto1","plainChilds":"","childs":[]},{"content":"Dragon","plain":"Dragon","plainChilds":"","childs":[]},{"content":"FISH","plain":"FISH","plainChilds":"","childs":[]},{"content":"LEX","plain":"LEX","plainChilds":"","childs":[]},{"content":"MAG","plain":"MAG","plainChilds":"","childs":[]},{"content":"Py","plain":"Py","plainChilds":"","childs":[]},{"content":"RC","plain":"RC","plainChilds":"","childs":[]},{"content":"Salsa","plain":"Salsa","plainChilds":"","childs":[]},{"content":"SEAL","plain":"SEAL","plainChilds":"","childs":[]},{"content":"Turing","plain":"Turing","plainChilds":"","childs":[]},{"content":"Vernam","plain":"Vernam","plainChilds":"","childs":[]},{"content":"VEST","plain":"VEST","plainChilds":"","childs":[]},{"content":"WAKE","plain":"WAKE","plainChilds":"","childs":[]},{"content":"ZUC","plain":"ZUC","plainChilds":"","childs":[]}]]}},"Hash Functions":{"plain":"","childs":{"0":[[{"content":"BLAKE2","plain":"BLAKE2","plainChilds":"","childs":[]},{"content":"GOST","plain":"GOST","plainChilds":"","childs":[]},{"content":"MD2","plain":"MD2","plainChilds":"","childs":[]},{"content":"MD5","plain":"MD5","plainChilds":"","childs":[]},{"content":"MD6","plain":"MD6","plainChilds":"","childs":[]},{"content":"PBKDF2","plain":"PBKDF2","plainChilds":"","childs":[]},{"content":"RIPEMD","plain":"RIPEMD","plainChilds":"","childs":[]},{"content":"scrypt","plain":"scrypt","plainChilds":"","childs":[]},{"content":"SHA","plain":"SHA","plainChilds":"","childs":[]},{"content":"SHA-1","plain":"SHA-1","plainChilds":"","childs":[]},{"content":"SHA-2","plain":"SHA-2","plainChilds":"","childs":[]},{"content":"SHA-3","plain":"SHA-3","plainChilds":"","childs":[]},{"content":"SHA-256","plain":"SHA-256","plainChilds":"","childs":[]},{"content":"SHA-512","plain":"SHA-512","plainChilds":"","childs":[]},{"content":"SHAKE","plain":"SHAKE","plainChilds":"","childs":[]},{"content":"SipHash","plain":"SipHash","plainChilds":"","childs":[]},{"content":"WHIRLPOOL","plain":"WHIRLPOOL","plainChilds":"","childs":[]}]]}},"Encryption Modes":{"plain":"","childs":{"0":[[{"content":"ABC","plain":"ABC","plainChilds":"","childs":[]},{"content":"BPS","plain":"BPS","plainChilds":"","childs":[]},{"content":"CBC","plain":"CBC","plainChilds":"","childs":[]},{"content":"CCM","plain":"CCM","plainChilds":"","childs":[]},{"content":"CFB","plain":"CFB","plainChilds":"","childs":[]},{"content":"CTR","plain":"CTR","plainChilds":"","childs":[]},{"content":"CWC","plain":"CWC","plainChilds":"","childs":[]},{"content":"EAX","plain":"EAX","plainChilds":"","childs":[]},{"content":"ECB","plain":"ECB","plainChilds":"","childs":[]},{"content":"FFX","plain":"FFX","plainChilds":"","childs":[]},{"content":"GCM","plain":"GCM","plainChilds":"","childs":[]},{"content":"IGE","plain":"IGE","plainChilds":"","childs":[]},{"content":"IOC","plain":"IOC","plainChilds":"","childs":[]},{"content":"OCB","plain":"OCB","plainChilds":"","childs":[]},{"content":"OFB","plain":"OFB","plainChilds":"","childs":[]},{"content":"PCBC","plain":"PCBC","plainChilds":"","childs":[]},{"content":"RAC","plain":"RAC","plainChilds":"","childs":[]},{"content":"SIV","plain":"SIV","plainChilds":"","childs":[]},{"content":"XBC","plain":"XBC","plainChilds":"","childs":[]},{"content":"XCBC","plain":"XCBC","plainChilds":"","childs":[]}]]}},"Message Authentication Codes":{"plain":"","childs":{"0":[[{"content":"HMAC","plain":"HMAC","plainChilds":"","childs":[]},{"content":"Poly1305","plain":"Poly1305","plainChilds":"","childs":[]},{"content":"TMAC","plain":"TMAC","plainChilds":"","childs":[]},{"content":"XCBC","plain":"XCBC","plainChilds":"","childs":[]}]]}},"Public Key Cryptography":{"plain":"","childs":{"0":[[{"content":"DH","plain":"DH","plainChilds":"","childs":[]},{"content":"DSA","plain":"DSA","plainChilds":"","childs":[]},{"content":"DSS","plain":"DSS","plainChilds":"","childs":[]},{"content":"ECDH","plain":"ECDH","plainChilds":"","childs":[]},{"content":"ECDSA","plain":"ECDSA","plainChilds":"","childs":[]},{"content":"RSA","plain":"RSA","plainChilds":"","childs":[]}]]}},"Public Key Infrastructure":{"plain":"","childs":{"0":[[{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"DVCS","plain":"DVCS","plainChilds":"","childs":[]},{"content":"LDAP","plain":"LDAP","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"OpenCA","plain":"OpenCA","plainChilds":"","childs":[]},{"content":"PKCS","plain":"PKCS","plainChilds":"","childs":[]},{"content":"PKIX","plain":"PKIX","plainChilds":"","childs":[]},{"content":"SET","plain":"SET","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}},"Protocols":{"plain":"","childs":{"0":[[{"content":"AS2","plain":"AS2","plainChilds":"","childs":[]},{"content":"AKA","plain":"AKA","plainChilds":"","childs":[]},{"content":"CMC","plain":"CMC","plainChilds":"","childs":[]},{"content":"CMP","plain":"CMP","plainChilds":"","childs":[]},{"content":"CSR","plain":"CSR","plainChilds":"","childs":[]},{"content":"CMS","plain":"CMS","plainChilds":"","childs":[]},{"content":"DTLS","plain":"DTLS","plainChilds":"","childs":[]},{"content":"DPD","plain":"DPD","plainChilds":"","childs":[]},{"content":"DCII","plain":"DCII","plainChilds":"","childs":[]},{"content":"EST","plain":"EST","plainChilds":"","childs":[]},{"content":"GSI","plain":"GSI","plainChilds":"","childs":[]},{"content":"HTTPS","plain":"HTTPS","plainChilds":"","childs":[]},{"content":"IES","plain":"IES","plainChilds":"","childs":[]},{"content":"IKE","plain":"IKE","plainChilds":"","childs":[]},{"content":"IPsec","plain":"IPsec","plainChilds":"","childs":[]},{"content":"OCSP","plain":"OCSP","plainChilds":"","childs":[]},{"content":"PCT","plain":"PCT","plainChilds":"","childs":[]},{"content":"PE","plain":"PE","plainChilds":"","childs":[]},{"content":"PEM","plain":"PEM","plainChilds":"","childs":[]},{"content":"PHE","plain":"PHE","plainChilds":"","childs":[]},{"content":"PoSE","plain":"PoSE","plainChilds":"","childs":[]},{"content":"RTD","plain":"RTD","plainChilds":"","childs":[]},{"content":"SEND","plain":"SEND","plainChilds":"","childs":[]},{"content":"SRTP","plain":"SRTP","plainChilds":"","childs":[]},{"content":"SSH","plain":"SSH","plainChilds":"","childs":[]},{"content":"SSL","plain":"SSL","plainChilds":"","childs":[]},{"content":"TSP","plain":"TSP","plainChilds":"","childs":[]},{"content":"TLS","plain":"TLS","plainChilds":"","childs":[]},{"content":"WPA","plain":"WPA","plainChilds":"","childs":[]},{"content":"WPS","plain":"WPS","plainChilds":"","childs":[]},{"content":"WTLS","plain":"WTLS","plainChilds":"","childs":[]},{"content":"X.509","plain":"X.509","plainChilds":"","childs":[]}]]}}}]